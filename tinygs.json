[
    {
        "id": "7f41153fd2c90d1e",
        "type": "tab",
        "label": "TinyGS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e9d8aaaf140f3580",
        "type": "mqtt in",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "topic": "#",
        "qos": "0",
        "datatype": "auto",
        "broker": "d9aedb7cd949bad8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 100,
        "wires": [
            [
                "9d1c11ef1f029d58",
                "8758e91c1d718f84"
            ]
        ]
    },
    {
        "id": "9d1c11ef1f029d58",
        "type": "debug",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "53d4fe27f4b6c8d8",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Store last n readings",
        "func": "// Node configuration\nlet count = 1000;\nlet data = context.get(\"tinygs\") || [];\nlet now = new Date();\n\n// Update the status with current timestamp\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\nlet formattedtime = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;\n\nswitch (msg.topic) {\n    case \"reset\":\n        data = [];\n        context.set(\"tinygs\",data);\n        break;\n    case \"flush\":\n        return [{payload:data}];\n    default:\n        if (data.length>=count) {\n            data.shift();\n        } \n        data.push({\"timestamp\": now.getTime(), \"formattedtime\": formattedtime, \"topic\": msg.topic, \"payload\":msg.payload});\n        context.set(\"tinygs\",data);\n        node.status({fill:\"green\",shape:\"ring\",text:\"Items stored: \"+data.length});  \n        return [{payload:data}];\n}\n\n\nnode.status({fill:\"green\",shape:\"ring\",text:\"Items stored: \"+data.length});  \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 200,
        "wires": [
            [
                "b6a86a7b83a2063d"
            ]
        ]
    },
    {
        "id": "033d5ffa92b2c1d7",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "Reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 120,
        "wires": [
            [
                "53d4fe27f4b6c8d8"
            ]
        ]
    },
    {
        "id": "47888dc355096653",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "Flush",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "flush",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "53d4fe27f4b6c8d8"
            ]
        ]
    },
    {
        "id": "b6a86a7b83a2063d",
        "type": "template",
        "z": "7f41153fd2c90d1e",
        "name": "Format",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table>\n    <tr><th>Timestamp</th><th>Topic</th><th>Payload</th></tr>\n    {{#payload}}\n        <tr class=\"\">\n            <td>{{timestamp}}</td>\n            <td>{{topic}}</td>\n            <td>{{payload}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 860,
        "y": 200,
        "wires": [
            [
                "8947f2feae31df17"
            ]
        ]
    },
    {
        "id": "8947f2feae31df17",
        "type": "ui_template",
        "z": "7f41153fd2c90d1e",
        "group": "aea4f73bbdf60df6",
        "name": "User list dump",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\" height=\"500\" style=\"height: 500px;\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1060,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8758e91c1d718f84",
        "type": "switch",
        "z": "7f41153fd2c90d1e",
        "name": "Ignore map updates",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "sat_pos_oled",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 220,
        "wires": [
            [],
            [
                "53d4fe27f4b6c8d8",
                "c7e00515107823da",
                "9164b25bbd37435c"
            ]
        ]
    },
    {
        "id": "c7e00515107823da",
        "type": "switch",
        "z": "7f41153fd2c90d1e",
        "name": "Begin frame",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "cmnd/frame/0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 400,
        "wires": [
            [
                "48d699149f7f23f8"
            ],
            []
        ]
    },
    {
        "id": "08d92070acaeee4f",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Save 1st line",
        "func": "// This is the data for the first line of the telegram message:\n// Norby, RSSI/SNR:-130.5/-12.5dB, CONFIRMED\n\nmsg.msg1 = \"📡 \"+msg.payload[0][4]+\", \"+msg.payload[2][4]+\", \"+msg.payload[4][4];\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 400,
        "wires": [
            [
                "eaad752f7f82f3bb"
            ]
        ]
    },
    {
        "id": "48d699149f7f23f8",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 400,
        "wires": [
            [
                "08d92070acaeee4f"
            ]
        ]
    },
    {
        "id": "fd0a14d195af7ea2",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 960,
        "wires": [
            [
                "71e4a902c5bbd9ef"
            ]
        ]
    },
    {
        "id": "71e4a902c5bbd9ef",
        "type": "http request",
        "z": "7f41153fd2c90d1e",
        "name": "Station Information",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.tinygs.com/v1/station/YOUR_STATION_ID@YOUR_ID",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 370,
        "y": 960,
        "wires": [
            [
                "af09d943dfd17f58"
            ]
        ]
    },
    {
        "id": "36fe14863fbcc383",
        "type": "debug",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 960,
        "wires": []
    },
    {
        "id": "704cd31cd6ee24cf",
        "type": "http request",
        "z": "7f41153fd2c90d1e",
        "name": "Packet List",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.tinygs.com/v1/packets?station=YOUR_STATION_ID@YOUR_ID",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "a95e4a5d08531ded"
            ]
        ]
    },
    {
        "id": "24897f19e961a8d8",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "704cd31cd6ee24cf"
            ]
        ]
    },
    {
        "id": "c9880ad469ca2544",
        "type": "debug",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1040,
        "wires": []
    },
    {
        "id": "af09d943dfd17f58",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 960,
        "wires": [
            [
                "36fe14863fbcc383"
            ]
        ]
    },
    {
        "id": "a95e4a5d08531ded",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 1040,
        "wires": [
            [
                "c9880ad469ca2544"
            ]
        ]
    },
    {
        "id": "7082e4df55753f41",
        "type": "http request",
        "z": "7f41153fd2c90d1e",
        "name": "Packet View",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.tinygs.com/v1/packet/886faf54-6fc4-46bd-9c3f-c1a9a545237d",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 350,
        "y": 1120,
        "wires": [
            [
                "5c22c9b0c3b67f9e"
            ]
        ]
    },
    {
        "id": "2bf33afecb71d2c7",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1120,
        "wires": [
            [
                "7082e4df55753f41"
            ]
        ]
    },
    {
        "id": "5c22c9b0c3b67f9e",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 1120,
        "wires": [
            [
                "8efc3571e7f11e6c"
            ]
        ]
    },
    {
        "id": "8efc3571e7f11e6c",
        "type": "debug",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1120,
        "wires": []
    },
    {
        "id": "690e4bcfd6543516",
        "type": "delay",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 500,
        "y": 500,
        "wires": [
            [
                "7e452c7fd7b8e6e2"
            ]
        ]
    },
    {
        "id": "7e452c7fd7b8e6e2",
        "type": "http request",
        "z": "7f41153fd2c90d1e",
        "name": "Packet List",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.tinygs.com/v2/packets?station=YOUR_STATION_ID@YOUR_ID",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "5d10321ffed3417c"
            ]
        ]
    },
    {
        "id": "5d10321ffed3417c",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 870,
        "y": 500,
        "wires": [
            [
                "90cdaeae6b99de11"
            ]
        ]
    },
    {
        "id": "90cdaeae6b99de11",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Generate URL & Filename",
        "func": "// msg.url generates the URL to download the packet information\n// msg.filename generates the filename, so the entire packet is saved in a json file\n\nmsg.url = \"https://api.tinygs.com/v1/packet/\" + msg.payload.packets[0].id;\nmsg.filename = \"/home/nygma/tinygs/\"+ msg.payload.packets[0].id +\".json\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "131c24a1bdda37ba"
            ]
        ]
    },
    {
        "id": "131c24a1bdda37ba",
        "type": "http request",
        "z": "7f41153fd2c90d1e",
        "name": "Packet View",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 690,
        "y": 600,
        "wires": [
            [
                "8c14e2d7daf95ba8",
                "fffe2d31fef35c76",
                "33da7ebab1517b03"
            ]
        ]
    },
    {
        "id": "8c14e2d7daf95ba8",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 870,
        "y": 700,
        "wires": [
            [
                "e48c8a40ed6f5c99"
            ]
        ]
    },
    {
        "id": "bccfc1b9e58eeb99",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "Test the packet view",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 580,
        "wires": [
            [
                "7e452c7fd7b8e6e2"
            ]
        ]
    },
    {
        "id": "e48c8a40ed6f5c99",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Find my station",
        "func": "let station_id=\"YOUR_STATION_ID\";\n\n// This code finds the data for your station from the stations arra and\n// saved it in msg.payload.mystation\nfor (let i=0; i<msg.payload.stations.length; i++) {\n    if (msg.payload.stations[i].name === station_id) {\n        msg.payload.mystation = msg.payload.stations[i];\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1060,
        "y": 700,
        "wires": [
            [
                "87538219df907cf9"
            ]
        ]
    },
    {
        "id": "a840a07eb82a1b43",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "<div v-if=\"packet.parsed.telemetry\">  📻 {{p.tinygsTxPower}}mW  🌡 {{p.tinygsTxTemp}}ºC <br />  🛰 {{p.tinygsMainVoltage}}mV ⛽️ {{p.tinygsLoadPower}}mW 🌡{{p.tinygsTemp}}ºC<br />  ☀️{{p.tinygsSolarPower}}mW 🔋{{p.tinygsBatCap}}mAh 🔌 {{p.tinygsChargePower}}mW   <br />  🌡 Board PMM: {{p.sesMedianPmmTemp}}ºC  PAM: {{p.sesMedianPamTemp}}ºC   PDM: {{p.sesMedianPdmTemp}}ºC <br />  🌡 Solar Array X-: {{p.sesMedianPanelXTempNegative}}ºC  Solar Array X+: {{p.sesMedianPanelXTempPositive}}ºC <br />  BRK Reset: {{p.brkRestartsCountActive}} Frame: {{p.frameNumber}}<br /></div><div v-else><strong>No parser available for this type of packet.</strong> This is a valid packet but its contents are unknown. The information to decode this packet was not published yet.</div>",
        "payloadType": "str",
        "x": 320,
        "y": 1260,
        "wires": [
            [
                "d2116314de8fca55"
            ]
        ]
    },
    {
        "id": "d2116314de8fca55",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Modify template",
        "func": "let template = msg.payload;\n\ntemplate = template.substring(template.indexOf(\">\")+3,1000);\ntemplate = template.replace(/<br \\/>/g, \"\");\ntemplate = template.substring(0,template.indexOf(\"<\"));\ntemplate = template.replace(/{{p./g, \"{{msg.payload.parsed.payload.\");\n\nmsg.payload = template;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 1260,
        "wires": [
            [
                "490cec15a4377640"
            ]
        ]
    },
    {
        "id": "490cec15a4377640",
        "type": "debug",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1260,
        "wires": []
    },
    {
        "id": "87538219df907cf9",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Save 2nd line",
        "func": "// This generates the second line of the telegram message:\n// YOUR_STATION_ID: 1741 km, 11.16°, -128.25 dBm, -11.25 dB\n\nmsg.msg2 = msg.payload.mystation.name+\": \"+msg.payload.mystation.distance.toFixed(0)+\" km, \"+msg.payload.mystation.elevation.toFixed(2)+\"°, \"+msg.payload.mystation.receptionParams.rssi+\" dBm, \"+msg.payload.mystation.receptionParams.snr+\" dB\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1260,
        "y": 700,
        "wires": [
            [
                "ae021cab0198030f"
            ]
        ]
    },
    {
        "id": "7dc97aac4fd32ff0",
        "type": "template",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "",
        "output": "str",
        "x": 1260,
        "y": 760,
        "wires": [
            [
                "ba451fc294bb8caf"
            ]
        ]
    },
    {
        "id": "ae021cab0198030f",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Modify template",
        "func": "// we get the HTML template from the resonse and make some changes to it\n// so we can run it through the template node \n\nlet template = msg.payload.template;\n\ntemplate = template.substring(template.indexOf(\">\")+3,1000);\ntemplate = template.replace(/<br \\/>/g, \"\");\ntemplate = template.substring(0,template.indexOf(\"<\"));\ntemplate = template.replace(/{{p./g, \"{{payload.parsed.payload.\");\n\nmsg.template = template;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1060,
        "y": 760,
        "wires": [
            [
                "7dc97aac4fd32ff0"
            ]
        ]
    },
    {
        "id": "ba451fc294bb8caf",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Service Msg",
        "func": "// Put together the entire telegram message\n// 1st line\n// 2nd line\n// template with the full data\n\nmsg.payload = {service: \"18\", type:\"message\", content:msg.msg1+\"\\r\\n\"+msg.msg2+\"\\r\\n\"+msg.payload};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1470,
        "y": 760,
        "wires": [
            [
                "79ee7227a3c11437"
            ]
        ]
    },
    {
        "id": "79ee7227a3c11437",
        "type": "link out",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "mode": "link",
        "links": [
            "86deb2f58b76aa52"
        ],
        "x": 1655,
        "y": 760,
        "wires": []
    },
    {
        "id": "eaad752f7f82f3bb",
        "type": "switch",
        "z": "7f41153fd2c90d1e",
        "name": "Confirmed?",
        "property": "payload[4][4]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CONFIRMED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 920,
        "y": 380,
        "wires": [
            [
                "690e4bcfd6543516"
            ],
            [
                "0aece1051e665f6a"
            ]
        ]
    },
    {
        "id": "0aece1051e665f6a",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Service Msg",
        "func": "msg.payload = {service: \"18\", type:\"message\", content:msg.msg1};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1470,
        "y": 380,
        "wires": [
            [
                "79ee7227a3c11437"
            ]
        ]
    },
    {
        "id": "b80e26a3d11f68e0",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 1400,
        "wires": [
            [
                "95974d781522c177"
            ]
        ]
    },
    {
        "id": "95974d781522c177",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "Count +1",
        "rules": [
            {
                "t": "set",
                "p": "mycounter",
                "pt": "flow",
                "to": "$flowContext(\"mycounter\")+1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "980a2fbdf7cf3b76",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1360,
        "wires": [
            [
                "8f192fd7e89a4f92"
            ]
        ]
    },
    {
        "id": "8f192fd7e89a4f92",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "Init",
        "rules": [
            {
                "t": "set",
                "p": "mycounter",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "fffe2d31fef35c76",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 970,
        "y": 580,
        "wires": [
            [
                "ed12a93da44ae1f5"
            ]
        ]
    },
    {
        "id": "66b53df7cab574c3",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Create SQL Insert",
        "func": "let station_id=\"YOUR_STATION_ID\";\n\n// get the data on my station and store it in msg.payload.mystation\nfor (let i=0; i<msg.payload.stations.length; i++) {\n    if (msg.payload.stations[i].name === station_id) {\n        msg.payload.mystation = msg.payload.stations[i];\n    }\n}\n\nmsg.topic = \"INSERT INTO tinygs_msg (serverTime, satellite, satDisplayName, freq, id, lat, lng, alt, station, crc_error, snr, frequency_error, rssi, distance, elevation, doppler)\" +\n  \" VALUES(\" +\n  msg.payload.serverTime+\", \"+\n  \"'\"+msg.payload.satellite+\"', \"+\n  \"'\"+msg.payload.satDisplayName+\"', \"+\n  msg.payload.freq+\", \"+\n  \"'\"+msg.payload.id+\"', \"+\n  msg.payload.satPos.lat+\", \"+\n  msg.payload.satPos.lng+\", \"+\n  msg.payload.satPos.alt+\", \"+\n  \"'\"+msg.payload.mystation.name+\"', \"+\n  (msg.payload.mystation.crc_error ? 1 : 0)+\", \"+\n  msg.payload.mystation.receptionParams.snr+\", \"+\n  msg.payload.mystation.receptionParams.frequency_error+\", \"+\n  msg.payload.mystation.receptionParams.rssi+\", \"+\n  msg.payload.mystation.distance+\", \"+\n  msg.payload.mystation.elevation+\", \"+\n  msg.payload.mystation.doppler+\n  \")\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 580,
        "wires": [
            [
                "92d5a8c3cec0577a"
            ]
        ]
    },
    {
        "id": "33da7ebab1517b03",
        "type": "file",
        "z": "7f41153fd2c90d1e",
        "name": "Save response",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 900,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "92d5a8c3cec0577a",
        "type": "sqlite",
        "z": "7f41153fd2c90d1e",
        "mydb": "1c25415d.b8427f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Node-Red DB",
        "x": 1440,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "173c3c5dc116849f",
        "type": "catch",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "scope": [
            "66b53df7cab574c3",
            "92d5a8c3cec0577a"
        ],
        "uncaught": false,
        "x": 1750,
        "y": 580,
        "wires": [
            [
                "7d463eb9a41d19a2"
            ]
        ]
    },
    {
        "id": "7d463eb9a41d19a2",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Store last n errors",
        "func": "// Node configuration\nlet count = 100;\nlet data = context.get(\"errors\") || [];\nlet now = new Date();\n\n// Update the status with current timestamp\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\nlet formattedtime = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;\n\nswitch (msg.topic) {\n    case \"reset\":\n        data = [];\n        context.set(\"errors\",data);\n        break;\n    case \"flush\":\n        return [{payload:data}];\n    default:\n        if (data.length>=count) {\n            data.shift();\n        } \n        data.push({\"timestamp\": now.getTime(), \"formattedtime\": formattedtime, \"topic\": msg.topic, \"payload\":msg.payload});\n        context.set(\"errors\",data);\n        node.status({fill:\"green\",shape:\"ring\",text:\"Items stored: \"+data.length});  \n        return [{payload:data}];\n}\n\n\nnode.status({fill:\"green\",shape:\"ring\",text:\"Items stored: \"+data.length});  \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2250,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "ef7ecd762ebb4aa1",
        "type": "catch",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "scope": [
            "90cdaeae6b99de11"
        ],
        "uncaught": false,
        "x": 1750,
        "y": 500,
        "wires": [
            [
                "eba9c161cdd39ca1"
            ]
        ]
    },
    {
        "id": "eba9c161cdd39ca1",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Generate URL & Filename",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 500,
        "wires": [
            [
                "7d463eb9a41d19a2"
            ]
        ]
    },
    {
        "id": "58089423c7ce62ac",
        "type": "catch",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "scope": [
            "e48c8a40ed6f5c99"
        ],
        "uncaught": false,
        "x": 1750,
        "y": 660,
        "wires": [
            [
                "38524e1e46f89d01"
            ]
        ]
    },
    {
        "id": "38524e1e46f89d01",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Find my station",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 660,
        "wires": [
            [
                "7d463eb9a41d19a2"
            ]
        ]
    },
    {
        "id": "7ccd76a9fbc4e8ba",
        "type": "catch",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "scope": [
            "87538219df907cf9"
        ],
        "uncaught": false,
        "x": 1750,
        "y": 700,
        "wires": [
            [
                "3db4c5f1f7eed506"
            ]
        ]
    },
    {
        "id": "3db4c5f1f7eed506",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Save 2nd line",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 700,
        "wires": [
            [
                "7d463eb9a41d19a2"
            ]
        ]
    },
    {
        "id": "8e4b451f9b0f1bf1",
        "type": "catch",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "scope": [
            "ae021cab0198030f"
        ],
        "uncaught": false,
        "x": 1750,
        "y": 820,
        "wires": [
            [
                "c2ab5904968839c9"
            ]
        ]
    },
    {
        "id": "c2ab5904968839c9",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Modify template",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 820,
        "wires": [
            [
                "7d463eb9a41d19a2"
            ]
        ]
    },
    {
        "id": "fd088ecd357b34dd",
        "type": "catch",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "scope": [
            "ba451fc294bb8caf"
        ],
        "uncaught": false,
        "x": 1750,
        "y": 860,
        "wires": [
            [
                "4f194a9ef093a5ab"
            ]
        ]
    },
    {
        "id": "4f194a9ef093a5ab",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Service Msg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 860,
        "wires": [
            [
                "7d463eb9a41d19a2"
            ]
        ]
    },
    {
        "id": "29c28a44d606c40b",
        "type": "bigtimer",
        "z": "7f41153fd2c90d1e",
        "outtopic": "override",
        "outpayload1": "0xAA",
        "outpayload2": "0",
        "name": "Big Timer",
        "comment": "",
        "lat": 0,
        "lon": 0,
        "starttime": "15",
        "endtime": 1425,
        "starttime2": 0,
        "endtime2": 0,
        "startoff": 0,
        "endoff": 0,
        "startoff2": 0,
        "endoff2": 0,
        "offs": 0,
        "outtext1": "",
        "outtext2": "",
        "timeout": 1440,
        "sun": true,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "jan": true,
        "feb": true,
        "mar": true,
        "apr": true,
        "may": true,
        "jun": true,
        "jul": true,
        "aug": true,
        "sep": true,
        "oct": true,
        "nov": true,
        "dec": true,
        "day1": 0,
        "month1": 0,
        "day2": 0,
        "month2": 0,
        "day3": 0,
        "month3": 0,
        "day4": 0,
        "month4": 0,
        "day5": 0,
        "month5": 0,
        "day6": 0,
        "month6": 0,
        "day7": 0,
        "month7": 0,
        "day8": 0,
        "month8": 0,
        "day9": 0,
        "month9": 0,
        "day10": 0,
        "month10": 0,
        "day11": 0,
        "month11": 0,
        "day12": 0,
        "month12": 0,
        "d1": 0,
        "w1": 0,
        "d2": 0,
        "w2": 0,
        "d3": 0,
        "w3": 0,
        "d4": 0,
        "w4": 0,
        "d5": 0,
        "w5": 0,
        "d6": 0,
        "w6": 0,
        "xday1": 0,
        "xmonth1": 0,
        "xday2": 0,
        "xmonth2": 0,
        "xday3": 0,
        "xmonth3": 0,
        "xday4": 0,
        "xmonth4": 0,
        "xday5": 0,
        "xmonth5": 0,
        "xday6": 0,
        "xmonth6": 0,
        "xday7": 0,
        "xmonth7": 0,
        "xday8": 0,
        "xmonth8": 0,
        "xday9": 0,
        "xmonth9": 0,
        "xday10": 0,
        "xmonth10": 0,
        "xday11": 0,
        "xmonth11": 0,
        "xday12": 0,
        "xmonth12": 0,
        "xd1": 0,
        "xw1": 0,
        "xd2": 0,
        "xw2": 0,
        "xd3": 0,
        "xw3": 0,
        "xd4": 0,
        "xw4": 0,
        "xd5": 0,
        "xw5": 0,
        "xd6": 0,
        "xw6": 0,
        "suspend": false,
        "random": false,
        "randon1": false,
        "randoff1": false,
        "randon2": false,
        "randoff2": false,
        "repeat": true,
        "atstart": true,
        "odd": false,
        "even": false,
        "x": 240,
        "y": 820,
        "wires": [
            [
                "245347f9546e31d8"
            ],
            [],
            []
        ]
    },
    {
        "id": "245347f9546e31d8",
        "type": "debug",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 800,
        "wires": []
    },
    {
        "id": "45f8607959bccff3",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 820,
        "wires": [
            [
                "29c28a44d606c40b"
            ]
        ]
    },
    {
        "id": "660969e1524c7755",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Next Pass (n2yo)",
        "func": "// Save data from the MQTT message for the Telegram message\nlet myarr = msg.topic.split(\"/\");\nmsg.msg1 = \"📡 \"+ myarr[2]+ \" - next satellite\\r\\n🛰 \" + msg.payload.sat;\n\nlet norad     =msg.payload.NORAD;\nlet nextdays  = \"1\";\nlet observer_lat = 47.441;\nlet observer_lng = 19.034;\nlet observer_alt = 150; \nlet min_elevation = 12;\nlet apikey =\"YOUR_API_KEY\";\n\nmsg.url = \"https://api.n2yo.com/rest/v1/satellite/visualpasses/\"+norad +\"/\"+observer_lat +\"/\"+observer_lng +\"/\" +observer_alt +\"/\"+nextdays +\"/\" + min_elevation +\"/&apiKey=\" +apikey ;\nreturn msg;\n\n/*\n\nRequest:https://api.n2yo.com/rest/v1/satellite/visualpasses/25544/41.702/-76.014/0/2/300/&apiKey=589P8Q-SDRYX8-L842ZD-5Z9\n\n\nGet radio passes\nThe \"radio passes\" are similar to \"visual passes\", the only difference being the requirement for the objects to be optically visible for observers. This function is useful mainly for predicting satellite passes to be used for radio communications. The quality of the pass depends essentially on the highest elevation value during the pass, which is one of the input parameters.\n\nRequest: /radiopasses/{id}/{observer_lat}/{observer_lng}/{observer_alt}/{days}/{min_elevation}\n\nhttps://www.n2yo.com/api/#radiopasses\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "7b9cc45591ad9293",
                "c9ae623ce5aca71d"
            ]
        ],
        "info": "Get visual passes\r\nGet predicted visual passes for any satellite relative to a location on Earth. A \"visual pass\" is a pass that should be optically visible on the entire (or partial) duration of crossing the sky. For that to happen, the satellite must be above the horizon, illumintaed by Sun (not in Earth shadow), and the sky dark enough to allow visual satellite observation.\r\n\r\nRequest: /visualpasses/{id}/{observer_lat}/{observer_lng}/{observer_alt}/{days}/{min_visibility}\r\n\r\nParameter\t^    Type\tRequired\tComments\r\nid\t            integer\tYes\t NORAD id\r\nobserver_lat\tfloat\tYes\t        Observer's latitide (decimal degrees format)\r\nobserver_lng\tfloat\tYes\t        Observer's longitude (decimal degrees format)\r\nobserver_alt\tfloat\tYes\t Observer's altitude above sea level in meters\r\ndays\t    integer\tYes\t        Number of days of prediction (max 10)\r\nmin_visibility\tinteger\tYes\t        Minimum number of seconds the satellite should be considered optically visible during the pass to be returned as result\r\n\r\n"
    },
    {
        "id": "9164b25bbd37435c",
        "type": "switch",
        "z": "7f41153fd2c90d1e",
        "name": "Next Satellite",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/cmnd/begine",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 300,
        "wires": [
            [
                "0d1a23a1dbf531d6"
            ]
        ]
    },
    {
        "id": "0d1a23a1dbf531d6",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 300,
        "wires": [
            [
                "660969e1524c7755"
            ]
        ]
    },
    {
        "id": "7b9cc45591ad9293",
        "type": "http request",
        "z": "7f41153fd2c90d1e",
        "name": "Next Pass Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1290,
        "y": 300,
        "wires": [
            [
                "7090cc8677239d7c",
                "e8dc6b731e884b69"
            ]
        ]
    },
    {
        "id": "0d0dac3851cc3aca",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Service Msg",
        "func": "if (msg.payload.info.passescount===0) {\n    msg.msg2 = \"No pass in the next 24 hours\";\n} else {\n    let start = new Date(msg.payload.passes[0].startUTC*1000);\n    let max = new Date(msg.payload.passes[0].maxUTC*1000);\n    let end = new Date(msg.payload.passes[0].endUTC*1000);\n    msg.msg2 = \"Next pass: \"+start.toLocaleTimeString(\"it-IT\")+\" - \"+ end.toLocaleTimeString(\"it-IT\")+\"\\r\\n\";\n    msg.msg2 += \"Max elevation: \"+msg.payload.passes[0].maxEl+\" @ \"+max.toLocaleTimeString(\"it-IT\");\n}\n\nmsg.payload = {service: \"18\", type:\"message\", content:msg.msg1+\"\\r\\n\"+msg.msg2};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 300,
        "wires": [
            [
                "79ee7227a3c11437"
            ]
        ]
    },
    {
        "id": "7090cc8677239d7c",
        "type": "json",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1490,
        "y": 300,
        "wires": [
            [
                "0d0dac3851cc3aca",
                "dd922bc09b296696",
                "3dc5d08680952255"
            ]
        ]
    },
    {
        "id": "ff1519bce41c9a32",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Convert SQLite to Influx",
        "func": "let data = [];\n\nfor (let i=0; i<msg.payload.length; i++) {\n\n    data.push(\n        {\n            \"measurement\": \"tinygs_msg\",\n            \"tags\": {\n                \"satellite\": msg.payload[i].satellite,\n                \"station\": msg.payload[i].station\n            },\n            \"fields\": {\n                \"freq\": msg.payload[i].freq,\n                \"id\": msg.payload[i].id,\n                \"lat\": msg.payload[i].lat,\n                \"lng\": msg.payload[i].lng,\n                \"alt\": msg.payload[i].alt,\n                \"crc_error\": msg.payload[i].crc_error,\n                \"snr\": msg.payload[i].snr,\n                \"frequency_error\": msg.payload[i].frequency_error,\n                \"rssi\": msg.payload[i].rssi,\n                \"distance\": msg.payload[i].distance,\n                \"elevation\": msg.payload[i].elevation,\n                \"doppler\": msg.payload[i].doppler,\n                \"satDisplayName\": msg.payload[i].satDisplayName\n            },\n            \"timestamp\": msg.payload[i].serverTime*1000000\n        }\n    );\n\n}\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "ed12a93da44ae1f5",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Create InfluxDB Insert",
        "func": "let station_id=\"YOUR_STATION_ID\";\n\n// get the data on my station and store it in msg.payload.mystation\nfor (let i=0; i<msg.payload.stations.length; i++) {\n    if (msg.payload.stations[i].name === station_id) {\n        msg.payload.mystation = msg.payload.stations[i];\n    }\n}\n\nlet data = [];\n\ndata.push(\n  {\n    \"measurement\": \"tinygs_msg\",\n    \"tags\": {\n      \"satellite\": msg.payload.satellite,\n      \"station\": msg.payload.mystation.name\n    },\n    \"fields\": {\n      \"freq\": msg.payload.freq,\n      \"id\": msg.payload.id,\n      \"lat\": msg.payload.satPos.lat,\n      \"lng\": msg.payload.satPos.lng,\n      \"alt\": msg.payload.satPos.alt,\n      \"crc_error\": (msg.payload.mystation.crc_error ? 1 : 0),\n      \"snr\": msg.payload.mystation.receptionParams.snr,\n      \"frequency_error\": msg.payload.mystation.receptionParams.frequency_error,\n      \"rssi\": msg.payload.mystation.receptionParams.rssi,\n      \"distance\": msg.payload.mystation.distance,\n      \"elevation\": msg.payload.mystation.elevation,\n      \"doppler\": msg.payload.mystation.doppler,\n      \"satDisplayName\": msg.payload.satDisplayName\n    }\n  }\n);\n\n\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 640,
        "wires": [
            [
                "c104bfe8d28d3ce3"
            ]
        ]
    },
    {
        "id": "c104bfe8d28d3ce3",
        "type": "link out",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "mode": "link",
        "links": [
            "0d3a8155db4e5123",
            "783d71afcd0cb582"
        ],
        "x": 1375,
        "y": 640,
        "wires": []
    },
    {
        "id": "dd922bc09b296696",
        "type": "function",
        "z": "7f41153fd2c90d1e",
        "name": "Create InfluxDB Insert",
        "func": "let text = \"\";\nlet start = 0;\nlet max = 0;\nlet end = 0;\nlet maxel = 0;\nlet ispass = false;\nif (msg.payload.info.passescount === 0) {\n  text = \"No pass in the next 24 hours\";\n} else {\n  start = new Date(msg.payload.passes[0].startUTC * 1000);\n  max = new Date(msg.payload.passes[0].maxUTC * 1000);\n  end = new Date(msg.payload.passes[0].endUTC * 1000);\n  maxel = msg.payload.passes[0].maxEl;\n  text = \"Next pass: \" + start.toLocaleTimeString(\"it-IT\") + \" - \" + end.toLocaleTimeString(\"it-IT\") + \"\\r\\n\";\n  text += \"Max elevation: \" + maxel + \" @ \" + max.toLocaleTimeString(\"it-IT\");\n  ispass = true;\n}\n\nlet data = [];\n\ndata.push(\n  {\n    \"measurement\": \"tinygs_nextpass\",\n    \"tags\": {\n    },\n    \"fields\": {\n      \"satname\": msg.payload.info.satname,\n      \"start\": start,\n      \"max\": max,\n      \"end\": end,\n      \"maxel\": maxel,\n      \"ispass\": ispass,\n      \"text\": text\n    }\n  }\n);\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 240,
        "wires": [
            [
                "4a983c2ddb7828f7"
            ]
        ]
    },
    {
        "id": "4a983c2ddb7828f7",
        "type": "link out",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "mode": "link",
        "links": [
            "24ae0b959843ce0e"
        ],
        "x": 1855,
        "y": 240,
        "wires": []
    },
    {
        "id": "3dc5d08680952255",
        "type": "debug",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 180,
        "wires": []
    },
    {
        "id": "bc5d962dc4483a2f",
        "type": "inject",
        "z": "7f41153fd2c90d1e",
        "name": "ISS test request",
        "props": [
            {
                "p": "url",
                "v": "https://api.n2yo.com/rest/v1/satellite/visualpasses/25544/41.702/-76.014/0/2/300/&apiKey=YOUR_API_KEY",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1020,
        "y": 260,
        "wires": [
            [
                "7b9cc45591ad9293"
            ]
        ]
    },
    {
        "id": "c9ae623ce5aca71d",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Request: \" & msg.payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 100,
        "wires": [
            [
                "b15c1ccb66502b42"
            ]
        ]
    },
    {
        "id": "b15c1ccb66502b42",
        "type": "file",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "filename": "/home/nygma/nextpass_debug.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1620,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e8dc6b731e884b69",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Response: \" & msg.payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 160,
        "wires": [
            [
                "b15c1ccb66502b42",
                "1be09b5ed267eb5b"
            ]
        ]
    },
    {
        "id": "1be09b5ed267eb5b",
        "type": "delay",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1380,
        "y": 200,
        "wires": [
            [
                "f9eedd70c1704ea6"
            ]
        ]
    },
    {
        "id": "f9eedd70c1704ea6",
        "type": "change",
        "z": "7f41153fd2c90d1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "-----",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 240,
        "wires": [
            [
                "b15c1ccb66502b42"
            ]
        ]
    },
    {
        "id": "d9aedb7cd949bad8",
        "type": "mqtt-broker",
        "name": "TinyGS",
        "broker": "mqtt.tinygs.com",
        "port": "8883",
        "tls": "a0475d0b423ea9f4",
        "clientid": "HAVC-NR",
        "autoConnect": true,
        "usetls": true,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "aea4f73bbdf60df6",
        "type": "ui_group",
        "name": "History",
        "tab": "e56f5fbc0edd4792",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "1c25415d.b8427f",
        "type": "sqlitedb",
        "db": "/home/nygma/sqlite/nodered",
        "mode": "RW"
    },
    {
        "id": "a0475d0b423ea9f4",
        "type": "tls-config",
        "name": "Certificates",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "newRoot.cert",
        "keyname": "",
        "caname": "DSTroot.cert",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "e56f5fbc0edd4792",
        "type": "ui_tab",
        "name": "TinyGS",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
[
    {
        "id": "dd535f73e60cae86",
        "type": "tab",
        "label": "Automation Engine",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ef5d57c4e8a016b7",
        "type": "junction",
        "z": "dd535f73e60cae86",
        "x": 320,
        "y": 680,
        "wires": [
            [
                "b42f5086b3970235",
                "2f43a6e2d75fab3a"
            ]
        ]
    },
    {
        "id": "9abb35e9b7955a5a",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"rulestore\":\"\",\"loglevel\":3}",
        "payloadType": "json",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "ddff2f6eba4946b9"
            ]
        ]
    },
    {
        "id": "ddff2f6eba4946b9",
        "type": "change",
        "z": "dd535f73e60cae86",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "settings",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ced1ee2a662bfa13",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Sample data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "data",
        "payload": "{ \"id\": \"temp\", \"name\": \"temperature\", \"type\": \"number\", \"value\": 15 }",
        "payloadType": "json",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "b7118d1dc8f62527",
                "ef42ee4db43ae8e5"
            ]
        ]
    },
    {
        "id": "b7118d1dc8f62527",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Automation Engine",
        "func": "function AddMessage(priority, loglevel, message) {\n    if (priority <= loglevel) {\n        node.status(message);\n    }\n}\n\nlet settings = flow.get(\"settings\");\nif (settings === undefined) {\n    AddMessage(0,0,{fill:\"red\",shape:\"ring\",text:\"Missing settings\"});\n    return;\n}\n// Set settings defaults\nif (settings.rulestore === undefined) settings.rulestore = \"\";\nif (settings.loglevel === undefined) settings.loglevel = 6;\n\nlet rules = flow.get(\"rules\", settings.rulestore) ?? [];\nlet datacache = flow.get(\"datacache\") ?? {};\n\nif ((msg.topic === \"data\") || (msg.topic === \"time\")) {\n    AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"0| Input type: \" + msg.topic });\n    if (msg.topic === \"data\") {\n        datacache[msg.payload.id] = msg.payload;\n        flow.set(\"datacache\", datacache);\n    }\n\n\n    for (let i = 0; i < rules.length; i++) {\n        let rule = rules[i];\n        AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"0| Checking \" + rule.name });\n        if (!rule.enabled) {\n            // Rule is not enabled, skip to the next rule\n            AddMessage(3, settings.loglevel,{ fill: \"green\", shape: \"dot\", text: \"1a| Rule \" + rule.name + \" not enabled.\" });\n            continue;\n        } \n\n        // Check if the current data is listed in the conditions\n        if (((msg.topic === \"data\") && (rule.conditions.filter(e => e.operand === msg.payload.id).length > 0)) || ((msg.topic === \"time\") && (rule.conditions.filter(e => e.trigger === \"time\").length > 0))) {\n            AddMessage(4, settings.loglevel,{fill:\"grey\",shape:\"dot\",text:\"1| Evaluating rule \"+rule.name});\n            let condition_or = false;\n            let condition_and = true;\n            // evaluate conditions\n            for (let j = 0; j < rule.conditions.length; j++) {\n                let condition = rule.conditions[j];\n                AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"2| Check condition \" + j + \", trigger:\" +condition.trigger});\n                let data = datacache[condition.operand];\n                switch (condition.trigger) {\n                    case \"time\": \n                        // Data validation\n                        if (condition.value.length !== 5) {\n                            AddMessage(1, settings.loglevel,{ fill: \"red\", shape: \"dot\", text: \"3| Date format incorrect (length)\" });\n                            condition_and = false;\n                            condition_or = false;\n                            break;\n                        }\n                        if (condition.value.split(\":\").length !== 2) {\n                            AddMessage(1, settings.loglevel,{ fill: \"red\", shape: \"dot\", text: \"3| Date format incorrect (hh:mm)\" });\n                            condition_and = false;\n                            condition_or = false;\n                            break;\n                        }\n                        // Construct the current time\n                        let now = new Date();\n                        let hour = \"00000\" + now.getHours();\n                        let minute = \"00000\" + now.getMinutes();\n                        hour = hour.substring(hour.length - 2, hour.length);\n                        minute = minute.substring(minute.length - 2, minute.length);\n\n                        data = { \"id\": \"time\", \"name\": \"time\", \"type\": \"string\", \"value\": hour + \":\" + minute };\n                        break;\n                    case \"data\":\n                    case \"state\":\n                        // if data does not exists, evaluate to true - most to allow initial states\n                        if (data === undefined) {\n                            condition_or = true;\n                            AddMessage(3, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"2| \" + condition.operand + \" data missing, evaluating to true\" });\n                            break;\n                        }\n                        break;\n                    default: AddMessage(1, settings.loglevel,{ fill: \"red\", shape: \"ring\", text: \"4| Unknown condition trigger \" + condition.trigger });\n\n                }\n\n                let breakout = false;\n                if (data !== undefined) {\n                    AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"3| \" + condition.operand + \" condition: \" + data.value+ \" \" + condition.operator + \" \"+ condition.value});\n                \n                    switch(condition.operator) {\n                        case \"GT\": \n                            if (data.value > condition.value) {\n                                condition_or = true;\n                                AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"4| \" + condition.operand + \" condition true\" });\n                            } else {\n                                condition_and = false;\n                                AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"4| \" + condition.operand + \" condition false\" });\n                                if (rule.operator === \"AND\") {\n                                    breakout = true;\n                                }\n                            }\n                            break;\n                        case \"LT\":\n                            if (data.value < condition.value) {\n                                condition_or = true;\n                                AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"4| \" + condition.operand + \" condition true\" });\n                            } else {\n                                condition_and = false;\n                                AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"4| \" + condition.operand + \" condition false\" });\n                                if (rule.operator === \"AND\") {\n                                    breakout = true;\n                                }\n                            }\n                            break;\n                        case \"EQ\":\n                            if (data.value === condition.value) {\n                                condition_or = true;\n                                AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"4| \" + condition.operand + \" condition true\" });\n                            } else {\n                                condition_and = false;\n                                AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"4| \" + condition.operand + \" condition false\" });\n                                if (rule.operator === \"AND\") {\n                                    breakout = true;\n                                }\n                            }\n                            break;\n                        default: AddMessage(1, settings.loglevel,{ fill: \"red\", shape: \"ring\", text: \"4| Unknown condition operator \"+ condition.operator});\n                    } // end switch\n                }\n                // Check if we need to break out from the loop (if a condition failed already and we are in AND mode)\n                if (breakout) {\n                    AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"4a| Exit condition checking\" });\n                    break;\n                }\n            } // end for j loop\n            // All the rules are evaluated\n            let passed = false;\n            if ((rule.operator === \"AND\") && (condition_and)) { passed = true }\n            if ((rule.operator === \"OR\") && (condition_or)) { passed = true }\n            if (passed) {\n                AddMessage(3, settings.loglevel, { fill: \"green\", shape: \"dot\", text: \"5| \" + rule.name + \": Condition result: \" + passed });\n            } else {\n                AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"5| \" + rule.name + \": Condition result: \" + passed});\n            }\n\n            // Execute the actions\n            if (passed) { \n                for (let k=0; k<rule.actions.length; k++) { \n                    let action = rule.actions[k];\n                    AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"6| Starting action \" + action.type });\n                    switch (action.type) {\n                        case \"setstate\":\n                            datacache[action.state] = {\"id\": action.state, \"name\": action.name, \"type\": \"state\", \"value\": action.value}\n                            flow.set(\"datacache\", datacache);\n                            AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"7| Status set:\" + action.state });\n                            break;\n                        case \"control\":\n                            node.send({\"topic\": action.topic, \"payload\": action.value});\n                            AddMessage(4, settings.loglevel,{ fill: \"grey\", shape: \"dot\", text: \"7| Control sent:\" + action.topic });\n                            break;\n                        default: AddMessage(1, settings.loglevel,{ fill: \"red\", shape: \"ring\", text: \"7| Unknown action type \" + action.type });\n                    }\n                } // End of action loop\n            } // End of actions \n\n        } // Condition was found\n    } // End of looping through the rules\n\n\n} // End of processing data message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "1331ca398aae3494",
                "50e8e14346358262"
            ]
        ]
    },
    {
        "id": "1331ca398aae3494",
        "type": "debug",
        "z": "dd535f73e60cae86",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 300,
        "wires": []
    },
    {
        "id": "7033825860df0449",
        "type": "link in",
        "z": "dd535f73e60cae86",
        "name": "Automation Engine Data Injection",
        "links": [
            "9533ba1480dc771e",
            "708a5dbeeaf6ad79",
            "162349ebba2dca35",
            "593c88dfd060d2b1"
        ],
        "x": 275,
        "y": 360,
        "wires": [
            [
                "ef42ee4db43ae8e5",
                "b7118d1dc8f62527"
            ]
        ]
    },
    {
        "id": "878426d38ba8d702",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Rules",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"name\":\"Date test rule\",\"enabled\":false,\"operator\":\"AND\",\"conditions\":[{\"trigger\":\"time\",\"operand\":\"\",\"operator\":\"EQ\",\"value\":\"15:00\"}],\"actions\":[{\"type\":\"control\",\"topic\":\"date_test\",\"value\":1}]},{\"name\":\"Washing Starts\",\"enabled\":true,\"operator\":\"AND\",\"conditions\":[{\"trigger\":\"data\",\"operand\":\"washingmachine_power\",\"operator\":\"GT\",\"value\":1500},{\"trigger\":\"state\",\"operand\":\"washingmachine_state\",\"operator\":\"EQ\",\"value\":\"IDLE\"}],\"actions\":[{\"type\":\"setstate\",\"state\":\"washingmachine_state\",\"name\":\"Washingmachine State\",\"value\":\"WASHING\"}]},{\"name\":\"Washing Ends\",\"enabled\":true,\"operator\":\"AND\",\"conditions\":[{\"trigger\":\"data\",\"operand\":\"washingmachine_power\",\"operator\":\"LT\",\"value\":2},{\"trigger\":\"state\",\"operand\":\"washingmachine_state\",\"operator\":\"EQ\",\"value\":\"WASHING\"}],\"actions\":[{\"type\":\"setstate\",\"state\":\"washingmachine_state\",\"name\":\"Washingmachine State\",\"value\":\"IDLE\"},{\"type\":\"control\",\"topic\":\"washing_complete\",\"value\":1}]},{\"name\":\"DayTime Starts\",\"enabled\":true,\"operator\":\"AND\",\"conditions\":[{\"trigger\":\"data\",\"operand\":\"outside_light\",\"operator\":\"GT\",\"value\":400},{\"trigger\":\"state\",\"operand\":\"nighttime_state\",\"operator\":\"EQ\",\"value\":\"NIGHTTIME\"}],\"actions\":[{\"type\":\"setstate\",\"state\":\"nighttime_state\",\"name\":\"Night or Day\",\"value\":\"DAYTIME\"},{\"type\":\"control\",\"topic\":\"daytime_starts\",\"value\":1}]},{\"name\":\"NightTime Starts\",\"enabled\":true,\"operator\":\"AND\",\"conditions\":[{\"trigger\":\"data\",\"operand\":\"outside_light\",\"operator\":\"LT\",\"value\":270},{\"trigger\":\"state\",\"operand\":\"nighttime_state\",\"operator\":\"EQ\",\"value\":\"DAYTIME\"}],\"actions\":[{\"type\":\"setstate\",\"state\":\"nighttime_state\",\"name\":\"Night or Day\",\"value\":\"NIGHTTIME\"},{\"type\":\"control\",\"topic\":\"nighttime_starts\",\"value\":1}]},{\"name\":\"Plant Dry Reminder\",\"enabled\":true,\"operator\":\"AND\",\"conditions\":[{\"trigger\":\"time\",\"operand\":\"\",\"operator\":\"EQ\",\"value\":\"19:00\"},{\"trigger\":\"state\",\"operand\":\"plant_state\",\"operator\":\"EQ\",\"value\":\"DRY\"}],\"actions\":[{\"type\":\"control\",\"topic\":\"plant_dry_reminder\",\"value\":1}]},{\"name\":\"Plant Dry\",\"enabled\":true,\"operator\":\"AND\",\"conditions\":[{\"trigger\":\"time\",\"operand\":\"\",\"operator\":\"EQ\",\"value\":\"19:00\"},{\"trigger\":\"data\",\"operand\":\"soil_moisture\",\"operator\":\"LT\",\"value\":11},{\"trigger\":\"state\",\"operand\":\"plant_state\",\"operator\":\"EQ\",\"value\":\"WATERED\"}],\"actions\":[{\"type\":\"setstate\",\"state\":\"plant_state\",\"name\":\"Plant\",\"value\":\"DRY\"},{\"type\":\"control\",\"topic\":\"plant_dry\",\"value\":1}]},{\"name\":\"Plant watered\",\"enabled\":true,\"operator\":\"AND\",\"conditions\":[{\"trigger\":\"data\",\"operand\":\"soil_moisture\",\"operator\":\"GT\",\"value\":11},{\"trigger\":\"state\",\"operand\":\"plant_state\",\"operator\":\"EQ\",\"value\":\"DRY\"}],\"actions\":[{\"type\":\"setstate\",\"state\":\"plant_state\",\"name\":\"Plant\",\"value\":\"WATERED\"},{\"type\":\"control\",\"topic\":\"plant_watered\",\"value\":1}]}]",
        "payloadType": "json",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "ce0d32dd4dcc4471"
            ]
        ]
    },
    {
        "id": "ce0d32dd4dcc4471",
        "type": "change",
        "z": "dd535f73e60cae86",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rules",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "12a7d649080a5796",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Data for Automation Engine",
        "func": "msg.topic = \"data\";\nlet value = 15;\nmsg.payload = { \"id\": \"temp\", \"name\": \"temperature\", \"type\": \"number\", \"value\": value }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 540,
        "wires": [
            [
                "9533ba1480dc771e"
            ]
        ]
    },
    {
        "id": "9533ba1480dc771e",
        "type": "link out",
        "z": "dd535f73e60cae86",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "7033825860df0449"
        ],
        "x": 355,
        "y": 540,
        "wires": []
    },
    {
        "id": "194e235473bd73d7",
        "type": "comment",
        "z": "dd535f73e60cae86",
        "name": "Status Logging",
        "info": "",
        "x": 120,
        "y": 1780,
        "wires": []
    },
    {
        "id": "1a958a2bdce43a02",
        "type": "debug",
        "z": "dd535f73e60cae86",
        "name": "Status data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 1820,
        "wires": []
    },
    {
        "id": "54d90ba4d65cbbe5",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Aggregated Status Collection",
        "func": "let status = flow.get(\"status_summary\");\nif (status===undefined) {\n    status = [];\n}\n\nif (msg.topic===\"reset\") {\n    status = [];\n    flow.set(\"status_summary\", status);\n    msg.payload = status;\n    return msg;\n}\n\nlet now = new Date();\nlet key = msg.status.fill + \"|\" + msg.status.shape + \"|\" + msg.status.source.name;\n\nlet found = false;\nfor (let i=0;i<status.length;i++) {\n    if (status[i].key === key) {\n        // if match is found, increase the counter and update the time\n        status[i].count++;\n        status[i].timestamp = now.getTime();\n        status[i].time = now.toLocaleString();\n        status[i].text = msg.status.text;\n        found = true;\n        break;\n    }\n}\n\n// This error is not logged before, create it\nif (!found) {\n    status.push({ \"key\": key, \"timestamp\": now.getTime(), \"fill\": msg.status.fill, \"shape\": msg.status.shape, \"text\": msg.status.text, \"source\": msg.status.source.name, \"type\": msg.status.source.type, \"count\": 1, \"time\" : now.toLocaleString()});\n}\n\nflow.set(\"status_summary\", status);\n\nmsg.payload = status;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1880,
        "wires": [
            [
                "0178365162bf3d41",
                "d16a3f615b1c64dd"
            ]
        ]
    },
    {
        "id": "0178365162bf3d41",
        "type": "debug",
        "z": "dd535f73e60cae86",
        "name": "Summary output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1820,
        "wires": []
    },
    {
        "id": "2acff4a8de655a40",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Reset logs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1940,
        "wires": [
            [
                "54d90ba4d65cbbe5",
                "6ed5bbb48cf82bbe"
            ]
        ]
    },
    {
        "id": "6ed5bbb48cf82bbe",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Individual Status Collection",
        "func": "const collectionsize = 100; // define the number of error to be collected. Once limit is reached, older error is deleted.\n\nlet status = flow.get(\"status_all\");\nif (status===undefined) {\n    status = [];\n}\n\nif (msg.topic===\"reset\") {\n    status = [];\n    flow.set(\"status_all\", status);\n    msg.payload = status;\n    return msg;\n}\n\nlet now = new Date();\n\nif (status.length >= collectionsize) {\n    status.shift();\n}\n\nstatus.push({ \"timestamp\": now.getTime(), \"fill\": msg.status.fill, \"shape\": msg.status.shape, \"text\": msg.status.text, \"source\": msg.status.source.name, \"type\": msg.status.source.type, \"time\": now.toLocaleString() });\n\nflow.set(\"status_all\", status);\n\nmsg.payload = status;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1940,
        "wires": [
            [
                "b7a9ed9cf26f34c2",
                "5878cdfa6334aa09"
            ]
        ]
    },
    {
        "id": "b7a9ed9cf26f34c2",
        "type": "debug",
        "z": "dd535f73e60cae86",
        "name": "All output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2000,
        "wires": []
    },
    {
        "id": "d16a3f615b1c64dd",
        "type": "template",
        "z": "dd535f73e60cae86",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table>\n    <tr><th>Last Occurance</th><th>Count</th><th>Fill</th><th>Shape</th><th>Text</th><th>Source</th><th>Node Type</th></tr>\n    {{#payload}}\n        <tr class=\"\">\n            <td>{{time}}</td>\n            <td>{{count}}</td>\n            <td>{{fill}}</td>\n            <td>{{shape}}</td>\n            <td>{{text}}</td>\n            <td>{{source}}</td>\n            <td>{{type}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 660,
        "y": 1880,
        "wires": [
            [
                "c84e1a313de06b19"
            ]
        ]
    },
    {
        "id": "5878cdfa6334aa09",
        "type": "template",
        "z": "dd535f73e60cae86",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table>\n    <tr><th>Time</th><th>Fill</th><th>Shape</th><th>Text</th><th>Source</th><th>Node Type</th></tr>\n    {{#payload}}\n        <tr class=\"\">\n            <td>{{time}}</td>\n            <td>{{fill}}</td>\n            <td>{{shape}}</td>\n            <td>{{text}}</td>\n            <td>{{source}}</td>\n            <td>{{type}}</td>\n        </tr>\n    {{/payload}}\n</table>\n\n",
        "output": "str",
        "x": 660,
        "y": 1940,
        "wires": [
            [
                "be98bef28ee43608"
            ]
        ]
    },
    {
        "id": "c84e1a313de06b19",
        "type": "ui_template",
        "z": "dd535f73e60cae86",
        "group": "8be0a783c25b7c66",
        "name": "",
        "order": 0,
        "width": "24",
        "height": "10",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "be98bef28ee43608",
        "type": "ui_template",
        "z": "dd535f73e60cae86",
        "group": "0bbfe8d835f43144",
        "name": "",
        "order": 0,
        "width": "24",
        "height": "10",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "7961c23da93a3587",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 2120,
        "wires": [
            [
                "7ba1e10d51a0dd56"
            ]
        ]
    },
    {
        "id": "7ba1e10d51a0dd56",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Summary file",
        "func": "// Get the current time and convert it to text\nvar now = new Date();\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Generate out file name pattern\nmsg.fname = \"status_summary_\"+ yyyy + mm + dd + \".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"/home/nygma/\"+ msg.fname;\nmsg.email = {};\nmsg.email.summaryfilename = msg.filename;\nmsg.email.todaytext = now.toLocaleDateString();\n\nlet status = flow.get(\"status_summary\");\nmsg.email.summarycontent = status;\n\n// Check if status log exists at all\nif (status !== undefined) {\n    // Check if we have any statuss\n    if (status.length>0) {\n        msg.payload = status;\n        node.status({ fill: \"blue\", shape: \"ring\", text: msg.fname });\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2120,
        "wires": [
            [
                "c4518252837b692a"
            ]
        ]
    },
    {
        "id": "0b15d7254c26d5b1",
        "type": "file",
        "z": "dd535f73e60cae86",
        "name": "Summary file create",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 680,
        "y": 2120,
        "wires": [
            [
                "6a3e5fce89e3225d"
            ]
        ]
    },
    {
        "id": "c4518252837b692a",
        "type": "csv",
        "z": "dd535f73e60cae86",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,time,fill,shape,text,source,type,count",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 490,
        "y": 2120,
        "wires": [
            [
                "0b15d7254c26d5b1"
            ]
        ]
    },
    {
        "id": "6a3e5fce89e3225d",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "All statuses",
        "func": "// Get the current time and convert it to text\nvar now = new Date();\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Generate out file name pattern\nmsg.fname = \"status_all_\"+ yyyy + mm + dd + \".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"/home/nygma/\"+ msg.fname;\nmsg.email.allstatusfilename = msg.filename;\nmsg.email.allstatusfilenameonly = msg.fname;\n\nlet status = flow.get(\"status_all\");\n\n// Check if status log exists at all\nif (status !== undefined) {\n    // Check if we have any statuss\n    if (status.length>0) {\n        msg.payload = status;\n        node.status({ fill: \"blue\", shape: \"ring\", text: msg.fname });\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2200,
        "wires": [
            [
                "2b8075f9721cf747"
            ]
        ]
    },
    {
        "id": "2ad6a31d9ce27362",
        "type": "file",
        "z": "dd535f73e60cae86",
        "name": "All statuses file create",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 680,
        "y": 2200,
        "wires": [
            [
                "182ea9f86ed47d3e"
            ]
        ]
    },
    {
        "id": "2b8075f9721cf747",
        "type": "csv",
        "z": "dd535f73e60cae86",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,time,message,source,type",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 490,
        "y": 2200,
        "wires": [
            [
                "2ad6a31d9ce27362"
            ]
        ]
    },
    {
        "id": "be3726a2aca60769",
        "type": "change",
        "z": "dd535f73e60cae86",
        "name": "Set up the email",
        "rules": [
            {
                "t": "set",
                "p": "attachments",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "attachments.path",
                "pt": "msg",
                "to": "email.allstatusfilename",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "attachments.filename",
                "pt": "msg",
                "to": "email.allstatusfilenameonly",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "\"Status report - \" & msg.email.todaytext",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 2280,
        "wires": [
            [
                "1007333fd1b66489"
            ]
        ]
    },
    {
        "id": "1007333fd1b66489",
        "type": "e-mail",
        "z": "dd535f73e60cae86",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "csongor.varga@gmail.com",
        "dname": "Gmail",
        "x": 730,
        "y": 2280,
        "wires": []
    },
    {
        "id": "182ea9f86ed47d3e",
        "type": "template",
        "z": "dd535f73e60cae86",
        "name": "Email Body",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<head>\n</head>\n\n\n<body>\n    <h1>Status Update Summary - {{email.todaytext}} </h1>\n    <p>\n        <table border=\"1\">\n        <tr><th>Last Occurance</th><th>Count</th><th>Fill</th><th>Shape</th><th>Text</th><th>Source</th><th>Node Type</th></tr>\n        <tbody>\n            {{#email.summarycontent}}\n                <tr>\n                    <td>{{time}}</td>\n                    <td>{{count}}</td>\n                    <td>{{fill}}</td>\n                    <td>{{shape}}</td>\n                    <td>{{text}}</td>\n                    <td>{{source}}</td>\n                    <td>{{type}}</td>\n                </tr>\n            {{/email.summarycontent}}\n        </tbody>\n        </table>\n    </p>\n    <p>Please find the detailed status report in the attachment</p>\n \n </body>",
        "x": 350,
        "y": 2280,
        "wires": [
            [
                "be3726a2aca60769"
            ]
        ]
    },
    {
        "id": "be6de02e774bbc4a",
        "type": "change",
        "z": "dd535f73e60cae86",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "reset",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 2000,
        "wires": [
            [
                "54d90ba4d65cbbe5",
                "6ed5bbb48cf82bbe"
            ]
        ]
    },
    {
        "id": "61ba29290f717746",
        "type": "status",
        "z": "dd535f73e60cae86",
        "name": "",
        "scope": [
            "b7118d1dc8f62527"
        ],
        "x": 160,
        "y": 1880,
        "wires": [
            [
                "54d90ba4d65cbbe5",
                "6ed5bbb48cf82bbe",
                "1a958a2bdce43a02"
            ]
        ]
    },
    {
        "id": "3a9b17681be3a912",
        "type": "template",
        "z": "dd535f73e60cae86",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table>\n    <tr><th>Name</th><th>Value</th></tr>\n    {{#payload}}\n        <tr class=\"\">\n            <td>{{name}}</td>\n            <td>{{value}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 900,
        "y": 380,
        "wires": [
            [
                "7661260766daf1b0"
            ]
        ]
    },
    {
        "id": "7661260766daf1b0",
        "type": "ui_template",
        "z": "dd535f73e60cae86",
        "group": "d082943d35fc7c40",
        "name": "",
        "order": 0,
        "width": "6",
        "height": "10",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1100,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "ef42ee4db43ae8e5",
        "type": "delay",
        "z": "dd535f73e60cae86",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 380,
        "wires": [
            [
                "72e8300b2722235c"
            ]
        ]
    },
    {
        "id": "72e8300b2722235c",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "function 8",
        "func": "let datacache = flow.get(\"datacache\");\nif (datacache === undefined) {\n    datacache = {};\n}\n\nlet output = [];\n\nfor (const [key, value] of Object.entries(datacache)) {\n    output.push(value);\n}\n\nmsg.payload = output;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "3a9b17681be3a912"
            ]
        ]
    },
    {
        "id": "50e8e14346358262",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Test notification",
        "func": "msg.payload = { \"service\": 1, \"type\": \"message\", \"content\": \"Automation - \"+msg.topic+\": \"+msg.payload};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 240,
        "wires": [
            [
                "f07c8d202f242ac0"
            ]
        ]
    },
    {
        "id": "f07c8d202f242ac0",
        "type": "link out",
        "z": "dd535f73e60cae86",
        "name": "",
        "mode": "link",
        "links": [
            "86deb2f58b76aa52"
        ],
        "x": 955,
        "y": 240,
        "wires": []
    },
    {
        "id": "f2a3a58f560a25ab",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Washing on",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "data",
        "payload": "{\"id\":\"washingmachine_power\",\"name\":\"Washing Machine Power\",\"type\":\"number\",\"value\":2500}",
        "payloadType": "json",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "b7118d1dc8f62527"
            ]
        ]
    },
    {
        "id": "ca281e3988220823",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Washing off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "data",
        "payload": "{\"id\":\"washingmachine_power\",\"name\":\"Washing Machine Power\",\"type\":\"number\",\"value\":1}",
        "payloadType": "json",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "b7118d1dc8f62527"
            ]
        ]
    },
    {
        "id": "eb42e3b69b37271a",
        "type": "comment",
        "z": "dd535f73e60cae86",
        "name": "Rule documentation",
        "info": "# Rule Documentation\n\nRules store the instructions for the Automation Engines which incoming sensor readings to check and what what to do.\nRules are stored as object in an array.\n\nBelow example shows my washing machine cycle, where a high energy consumption sets the washing machine state to \"washing\". If during the washing state the consumption drops below 2, it sets the status back to idle and issues a command which can trigger an email or notification that the washing has been completed.\nTo archieve this 2 rules are needed, the first rule looks for the increase in power consumption to determine if a washing is in progress. The second rule looks for the low consumption to triggere the \"washing completed\" message.\n\n## Rule Header\n\n```\n    {\n        \"name\": \"Washing Starts\",\n        \"enabled\": true,\n        \"operator\": \"AND\",\n```\nAbove is the header of the rule, which contains a name that will be included in the message logs.\n`enabled` attributes controls if the rule is executed or not.\nThe `operator` describes if all the conditions need to be met (AND) or only one of the condition needs to be met (OR).\n\n## Rule Conditions\n\n```\n        \"conditions\": [\n```\n`conditions` attribute is an array which lists all the conditions (triggers) for the rule. Each condition has a `trigger` attribute which describes if the condition is triggered by update on data value, or for example time.\n\n### Data and State triggers\n\nThis section explains how to create a trigger on a data value or state value. This condition should be used when the condition is to be compared with a data point or state. When data update for (in the below case) `washingmachine_power` arrived to the node, the logic know which rules to check - which has a condition for this data point.\nThese conditions always contain either a `\"trigger\": \"data\"` or `\"trigger\": \"state\"` attribute.\n\n```\n            {\n                \"trigger\": \"data\",\n                \"operand\": \"washingmachine_power\",\n                \"operator\": \"GT\",\n                \"value\": 270\n            },\n```\nEach condition has an `operand` which is a data point id that is sent to the node, or a state id which is set by one of the rule.\n`operator` is the condition operator, and current EQ=equal, GT=greather than and LT=less than supported.\n`value` is the value to check against. \nIn the above example the condition is true if the value of the `washingmachine_power` is more than 270.\n\n```\n            {\n                \"trigger\": \"state\",\n                \"operand\": \"washingmachine_state\",\n                \"operator\": \"EQ\",\n                \"value\": \"IDLE\"\n            }\n        ],\n```\nThis is same as above, but in this case the `operand` is a state (which will be defined below), and the value is a string not a number.\n\n### Time Conditions\n\nThese conditions should be used if the rule needs to be evaluated as a certain time of the day. For example I want to receive my \"plants are dry\" validation in the evening when I have time to water them. Of course, the time condition can be used in conjunction with other data conditions, but this ensures it is only validated at a specific time.\nTime conditions defines hour and minute of the day when the rule is evaluated.\n\n```\n            {\n                \"trigger\": \"time\",\n                \"operand\": \"\",\n                \"operator\": \"EQ\",\n                \"value\": \"19:00\"\n            },\n```\n\nThe `trigger` value in this case is `time`, `operand` is not required, `operator` is `EQ` (others can also be used, but may not be properly evaluated), and the `value` is the time in HH:MM format (24 hour format).\nFor performance reasons we suggest to put the time condition as the first condition in the `conditions` list, so the code does not check the rest of the conditions if the time does not match with the current time.\n\n## Rule Actions\n\n```\n        \"actions\": [\n```\n`actions` is an array which contains action that are executed if the conditions are met.\n\nFew examples of supported actions:\n\n### Setting state\n\nThis example is used to set internal state that can be used in rule conditions. As in the above example power > 270 is evaluated with the state of IDLE. And power < 2 is only considered if the state is WASHING.\n\n```\n            {\n                \"type\": \"setstate\",\n                \"state\": \"washingmachine_state\",\n                \"name\": \"Washingmachine State\",\n                \"value\": \"WASHING\"\n            }\n```\n`type` is set to `setstate`, `state` and `name` are the id and name of the state. Id can be used on conditions, name is only for logging.\n`value` is the new state value to be set. This can be a number or text. State gets stored in the flow variable `datacache` along with other values. For this reason the state id and data id should be unique.\n\nIMPORTANT: if the state does not exists yet (because let's say Node-Red just restarted), the condition will evaluate to true. This explicitly assumes that this is the initial state. Since the rules are executed in order, make sure the rule with the \"assumed initial state\" is in the list first.\n\n### Sending Commands\n\nThis action sends a message out of the output port of the Automation Engine function node which can be used to control devices, send messages, etc.\n\n```\n            {\n                \"type\": \"control\",\n                \"topic\": \"washing_complete\",\n                \"value\": 1\n            }\n```\n`type` is set to `control`, `topic` is a text and will be used as `msg.topic` of the outgoing message. `value` can be a number or text and will be used as `msg.payload` of the outgoing message.\n\n```\n        ]\n    },\n```\nFinally close the actions array and the rule object.",
        "x": 540,
        "y": 120,
        "wires": []
    },
    {
        "id": "6448dccefec677b8",
        "type": "comment",
        "z": "dd535f73e60cae86",
        "name": "Version History",
        "info": "# Version 1.3 - Rule editor\n\n- Rule editor screen\n- Show rules, select rules, select conditions, select actions\n- Edit existing conditions\n- Enable/Disable rules (buttons)\n\n# Version 1.2 - Small changes\n\n- Log level added to settings\n- Context storage can be defined in settings\n- Enable/disable flag for rules\n\n# Version 1.1 - Time conditions\n\n- Condition checking exists after a false condition - peformance improvment\n- Adding trigger attribute to conditions (date|state|time)\n- Time condition is available\n\n# Version 1.0 - First Release\n\n- Core logic\n- Supported conditions: data value, state\n- Supported operators: LT, EQ, GT\n- Supported actions: setstate, control\n- State logging for debugging\n- Simple UI to monitor data",
        "x": 840,
        "y": 60,
        "wires": []
    },
    {
        "id": "4df9e415c5448de6",
        "type": "comment",
        "z": "dd535f73e60cae86",
        "name": "Settings Documentation",
        "info": "## Rule Storage Context\n\nDefines the store for the rules. Default value is \"\" which is the default storage context, but change it to any of the context defined in the settings.js.\n\n## Log Level\n\nSet the logging level of the logic. Higher value means more messages are shown, lower value less messages.\n- 0: Critical messages\n- 1: Error messages\n- 2: Warning messages\n- 3: Information messages\n- 4: Debug messages\n\nE.g. if `loglevel` is set to 3, the system will show messages in priority 0-3.",
        "x": 580,
        "y": 60,
        "wires": []
    },
    {
        "id": "e8eeca745c649671",
        "type": "comment",
        "z": "dd535f73e60cae86",
        "name": "Future Ideas",
        "info": "- Quite condition checking if operator AND and condition fails DONE\n- Date in conditions DONE\n- Reduce logs DONE\n- Delay as an action\n- Enable/disable rules DONE\n- Storage context DONE\n- condition if state does not exist (sort of already exists)",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "11c71d100a233a94",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Time",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "time",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "b7118d1dc8f62527"
            ]
        ]
    },
    {
        "id": "5db602285bbb4cd4",
        "type": "link in",
        "z": "dd535f73e60cae86",
        "name": "Reset Logs",
        "links": [
            "d53d25b55da64e34"
        ],
        "x": 145,
        "y": 2060,
        "wires": [
            [
                "54d90ba4d65cbbe5",
                "6ed5bbb48cf82bbe"
            ]
        ]
    },
    {
        "id": "869e47cb566e960c",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Reset logs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 500,
        "wires": [
            [
                "d53d25b55da64e34"
            ]
        ]
    },
    {
        "id": "d53d25b55da64e34",
        "type": "link out",
        "z": "dd535f73e60cae86",
        "name": "link out 29",
        "mode": "link",
        "links": [
            "5db602285bbb4cd4"
        ],
        "x": 245,
        "y": 500,
        "wires": []
    },
    {
        "id": "b42f5086b3970235",
        "type": "uibuilder",
        "z": "dd535f73e60cae86",
        "name": "",
        "topic": "",
        "url": "rulebuilder",
        "okToGo": true,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "6.8.2",
        "showMsgUib": false,
        "title": "",
        "descr": "",
        "x": 490,
        "y": 680,
        "wires": [
            [
                "542d139e5d1393dd",
                "b8c0b09cc766f266"
            ],
            [
                "2d4f5d466b216f6a",
                "9a115156b972bb49"
            ]
        ]
    },
    {
        "id": "df88891f3b929869",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "ef5d57c4e8a016b7"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "f650ac1311ab2701",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 720,
        "wires": [
            [
                "ef5d57c4e8a016b7"
            ]
        ]
    },
    {
        "id": "0126ee7b774a90ed",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "ef5d57c4e8a016b7"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "6e6d4cb7f3cf40c5",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "Toggle Visible Status",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showStatus\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 760,
        "wires": [
            [
                "ef5d57c4e8a016b7"
            ]
        ]
    },
    {
        "id": "ae19a38c056986a4",
        "type": "uib-element",
        "z": "dd535f73e60cae86",
        "name": "Rule list",
        "topic": "",
        "elementtype": "html",
        "parent": "#rulelist",
        "parentSource": "",
        "parentSourceType": "str",
        "elementid": "rule_list_uib",
        "elementId": "",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "data": "payload",
        "dataSourceType": "msg",
        "position": "last",
        "positionSourceType": "str",
        "passthrough": false,
        "confData": {},
        "x": 1640,
        "y": 640,
        "wires": [
            [
                "0dba633e1ad88a18"
            ]
        ]
    },
    {
        "id": "8ca05a140def546c",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1110,
        "y": 640,
        "wires": [
            [
                "668f619db096a5d2"
            ]
        ]
    },
    {
        "id": "668f619db096a5d2",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Get Rule List",
        "func": "let settings = flow.get(\"settings\");\nif (settings === undefined) {\n    node.status({fill: \"red\", shape: \"ring\", text: \"Missing settings\" });\n    return;\n}\n// Set settings defaults\nif (settings.rulestore === undefined) settings.rulestore = \"\";\n\nlet rules = flow.get(\"rules\", settings.rulestore);\nif (rules === undefined) {\n    rules = [];\n}\n\nif (rules.length===0) {\n    return;\n}\n\nlet editor = flow.get(\"editor\");\nif (editor === undefined) {\n    editor = {};\n}\n\nfor (let i = 0; i < rules.length; i++) {\n    rules[i].id = i;\n    // assign icons to the condition trigger types\n    for (let j = 0; j < rules[i].conditions.length; j++) {\n        switch(rules[i].conditions[j].trigger) {\n            case \"data\": \n                rules[i].conditions[j].icon = \"📝\";\n                break;\n            case \"state\":\n                rules[i].conditions[j].icon = \"🔁\";\n                break;\n            case \"time\":\n                rules[i].conditions[j].icon = \"🕒\";\n                break;\n            default:\n                rules[i].conditions[j].icon = \"🔠\";\n        }\n        rules[i].conditions[j].id = j;\n    }\n    // assign icons to the action types\n    for (let j = 0; j < rules[i].actions.length; j++) {\n        switch (rules[i].actions[j].type) {\n            case \"setstate\":\n                rules[i].actions[j].icon = \"📢\";\n                break;\n            case \"control\":\n                rules[i].actions[j].icon = \"📨\";\n                break;\n            default:\n                rules[i].actions[j].icon = \"🔠\";\n        }\n        rules[i].actions[j].id = j;\n    }\n    if (rules[i].selected) {\n        msg.selectedrulename = rules[i].name;\n    }\n\n}\n\ndelete msg.uibuilderCtrl;\nmsg.payload = rules;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "60b01117f354d1ec",
                "38fdb0468be58ba6",
                "d402aad04b418547",
                "9958dfd95401c6c4"
            ]
        ]
    },
    {
        "id": "60b01117f354d1ec",
        "type": "template",
        "z": "dd535f73e60cae86",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n            <div class=\"list-item{{#selected}} selected{{/selected}}\" id=\"rule_{{id}}\" onclick=\"uibuilder.eventSend(event)\">\n                <div class=\"icon\">{{#enabled}}🔔{{/enabled}}{{^enabled}}🔕{{/enabled}}</div>\n                <div class=\"content\">\n                    <h3>{{name}}</h3>\n                    <p>{{#conditions}}{{icon}}&nbsp;{{/conditions}} → {{#actions}}{{icon}}&nbsp;{{/actions}}</p>\n                </div>\n            </div>\n{{/payload}}\n",
        "output": "str",
        "x": 1480,
        "y": 640,
        "wires": [
            [
                "ae19a38c056986a4"
            ]
        ]
    },
    {
        "id": "542d139e5d1393dd",
        "type": "debug",
        "z": "dd535f73e60cae86",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 640,
        "wires": []
    },
    {
        "id": "b8c0b09cc766f266",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Process User Input",
        "func": "let settings = flow.get(\"settings\");\nif (settings === undefined) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Missing settings\" });\n    return;\n}\n// Set settings defaults\nif (settings.rulestore === undefined) settings.rulestore = \"\";\n// if (settings.loglevel === undefined) settings.loglevel = 6;\n\nlet rules = flow.get(\"rules\", settings.rulestore) ?? [];\nlet datacache = flow.get(\"datacache\") ?? {};\nlet editor = flow.get(\"editor\") ?? {};\n\nif (msg._ui.type ===\"eventSend\") {\n    let eventinput = msg._ui.id.split(\"_\");\n\n    // Handle the event if the user clicked on a rule\n    if (eventinput[0]===\"rule\") {\n        node.status({fill:\"green\",shape:\"ring\",text:\"Rule selection\"});\n        let ruleid = parseInt(eventinput[1]);\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Rule selected:\" +ruleid});\n        editor.ruleid = ruleid;\n        delete editor.conditionid;\n        delete editor.conditionid;\n        flow.set(\"editor\",editor);\n        msg.payload = editor;\n        msg.topic = \"ruleselected\";\n        // Set the selected flag on rules structure as well\n        for (let i = 0; i < rules.length; i++) {\n            if (i === editor.ruleid) {\n                rules[i].selected = true;\n            } else {\n                rules[i].selected = false;\n            } \n            // Reset all the condition selections  \n            for (let j = 0; j < rules[i].conditions.length; j++) {\n                rules[i].conditions[j].selected = false;\n            }         \n            // Reset all the action selections  \n            for (let j = 0; j < rules[i].actions.length; j++) {\n                rules[i].actions[j].selected = false;\n            }         \n        }\n        flow.set(\"rules\", rules, settings.rulestore);\n        return msg;\n    }\n\n    // Handle the event if the user click on a condition\n    if (eventinput[0] === \"condition\") {\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Condition selection\" });\n        let conditionid = parseInt(eventinput[1]);\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Condition selected:\" + conditionid });\n        editor.conditionid = conditionid;\n        flow.set(\"editor\", editor);\n        msg.payload = editor;\n        msg.topic = \"conditionselected\";\n        // Set the selected flag on conditions structure as well\n        for (let i = 0; i < rules[editor.ruleid].conditions.length; i++) {\n            if (i === editor.conditionid) {\n                rules[editor.ruleid].conditions[i].selected = true;\n            } else {\n                rules[editor.ruleid].conditions[i].selected = false;\n            }\n        }\n        flow.set(\"rules\", rules, settings.rulestore);\n        return msg;\n    }\n \n    // Handle the event if the user click on an action\n    if (eventinput[0] === \"action\") {\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Action selection\" });\n        let actionid = parseInt(eventinput[1]);\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Action selected:\" + actionid });\n        editor.actionid = actionid;\n        flow.set(\"editor\", editor);\n        msg.payload = editor;\n        msg.topic = \"actionselected\";\n        // Set the selected flag on action structure as well\n        for (let i = 0; i < rules[editor.ruleid].actions.length; i++) {\n            if (i === editor.actionid) {\n                rules[editor.ruleid].actions[i].selected = true;\n            } else {\n                rules[editor.ruleid].actions[i].selected = false;\n            }\n        }\n        flow.set(\"rules\", rules, settings.rulestore);\n        return msg;\n    }\n\n    // Handle the event if the user submits the condition form\n    if ((eventinput[0] === \"submit\") && (eventinput[1] === \"conditionform\")) {\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Condition form submitted\" });\n\n        rules[editor.ruleid].conditions[editor.conditionid].trigger = msg.payload.trigger;\n        rules[editor.ruleid].conditions[editor.conditionid].operand = msg.payload.operand;\n        rules[editor.ruleid].conditions[editor.conditionid].operator = msg.payload.operator;\n        rules[editor.ruleid].conditions[editor.conditionid].value = msg.payload.value;       \n\n        delete editor.conditionid;\n        flow.set(\"editor\", editor);\n        msg.payload = editor;\n        msg.topic = \"conditionselected\";\n        // Remove the selected flag on all conditions (reset the view)\n        for (let i = 0; i < rules[editor.ruleid].conditions.length; i++) {\n            rules[editor.ruleid].conditions[i].selected = false;\n        }\n        flow.set(\"rules\", rules, settings.rulestore);\n        return msg;\n    }\n\n    // Handle the event if the user enables/disables the rule\n    if ((eventinput[0] === \"submit\") && ((eventinput[1] === \"ruleenable\") || (eventinput[1] === \"ruledisable\"))) {\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Enable/Disable button pressed\" });\n\n        if (eventinput[1] === \"ruleenable\") {\n            rules[editor.ruleid].enabled = true;\n        } else {\n            rules[editor.ruleid].enabled = false;\n        }\n\n        delete editor.conditionid;\n        flow.set(\"editor\", editor);\n        msg.payload = editor;\n        msg.topic = \"ruleselected\";\n        // Remove the selected flag on all conditions (reset the view)\n        for (let i = 0; i < rules[editor.ruleid].conditions.length; i++) {\n            rules[editor.ruleid].conditions[i].selected = false;\n        }\n        flow.set(\"rules\", rules, settings.rulestore);\n        return msg;\n    }\n\n    node.status({ fill: \"red\", shape: \"dot\", text: \"Unhandled event: \" + msg._ui.id });\n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            [
                "35a5f7d969e0f5b3"
            ]
        ]
    },
    {
        "id": "38fdb0468be58ba6",
        "type": "uib-element",
        "z": "dd535f73e60cae86",
        "name": "Rule Name",
        "topic": "",
        "elementtype": "html",
        "parent": "#selectedrulename",
        "parentSource": "",
        "parentSourceType": "str",
        "elementid": "selected_rule_name",
        "elementId": "",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "data": "selectedrulename",
        "dataSourceType": "msg",
        "position": "last",
        "positionSourceType": "str",
        "passthrough": false,
        "confData": {},
        "x": 1650,
        "y": 680,
        "wires": [
            [
                "0dba633e1ad88a18"
            ]
        ]
    },
    {
        "id": "da38e26f2fe532ea",
        "type": "link in",
        "z": "dd535f73e60cae86",
        "name": "RuleBuilder UIBuilder Input",
        "links": [
            "0dba633e1ad88a18",
            "6c07f6adc9eb6bc5",
            "a9efb0678baddb7d",
            "30aa09c757a14fc6"
        ],
        "x": 225,
        "y": 800,
        "wires": [
            [
                "ef5d57c4e8a016b7"
            ]
        ]
    },
    {
        "id": "0dba633e1ad88a18",
        "type": "link out",
        "z": "dd535f73e60cae86",
        "name": "link out 57",
        "mode": "link",
        "links": [
            "da38e26f2fe532ea"
        ],
        "x": 1805,
        "y": 640,
        "wires": []
    },
    {
        "id": "35a5f7d969e0f5b3",
        "type": "switch",
        "z": "dd535f73e60cae86",
        "name": "What is the action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ruleselected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "conditionselected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "actionselected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1030,
        "y": 700,
        "wires": [
            [
                "668f619db096a5d2"
            ],
            [
                "d402aad04b418547"
            ],
            [
                "9958dfd95401c6c4"
            ]
        ],
        "outputLabels": [
            "Rule Selected",
            "Condition Selected",
            "Action Selected"
        ]
    },
    {
        "id": "f2f50f12d29c52d1",
        "type": "uib-element",
        "z": "dd535f73e60cae86",
        "name": "Condition list",
        "topic": "",
        "elementtype": "html",
        "parent": "#conditionlist",
        "parentSource": "",
        "parentSourceType": "str",
        "elementid": "condition_list_uib",
        "elementId": "",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "data": "payload",
        "dataSourceType": "msg",
        "position": "last",
        "positionSourceType": "str",
        "passthrough": false,
        "confData": {},
        "x": 1650,
        "y": 760,
        "wires": [
            [
                "6c07f6adc9eb6bc5"
            ]
        ]
    },
    {
        "id": "96fc0e7db46cf492",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1110,
        "y": 760,
        "wires": [
            [
                "d402aad04b418547"
            ]
        ]
    },
    {
        "id": "d402aad04b418547",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Get Condition List",
        "func": "let settings = flow.get(\"settings\");\nif (settings === undefined) {\n    node.status({fill: \"red\", shape: \"ring\", text: \"Missing settings\" });\n    return;\n}\n// Set settings defaults\nif (settings.rulestore === undefined) settings.rulestore = \"\";\n\nlet rules = flow.get(\"rules\", settings.rulestore);\nif (rules === undefined) {\n    rules = [];\n}\n\nif (rules.length===0) {\n    return;\n}\n\nlet editor = flow.get(\"editor\");\nif (editor === undefined) {\n    editor = {};\n}\n\ndelete msg.uibuilderCtrl;\nmsg.payload = rules[editor.ruleid].conditions;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 760,
        "wires": [
            [
                "0d966e3b0e7392b3",
                "01c2101948778563"
            ]
        ]
    },
    {
        "id": "0d966e3b0e7392b3",
        "type": "template",
        "z": "dd535f73e60cae86",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n            <div class=\"list-item{{#selected}} selected{{/selected}}\" id=\"condition_{{id}}\" onclick=\"uibuilder.eventSend(event)\">\n                <div class=\"content\">\n                    <h3>{{trigger}}&nbsp;{{operand}}&nbsp;{{operator}}&nbsp;{{value}}</h3>\n                </div>\n            \n            </div>\n            {{#selected}}<div id=\"condition_editor\"></div>{{/selected}}\n{{/payload}}\n",
        "output": "str",
        "x": 1480,
        "y": 760,
        "wires": [
            [
                "f2f50f12d29c52d1"
            ]
        ]
    },
    {
        "id": "6c07f6adc9eb6bc5",
        "type": "link out",
        "z": "dd535f73e60cae86",
        "name": "link out 58",
        "mode": "link",
        "links": [
            "da38e26f2fe532ea"
        ],
        "x": 1805,
        "y": 760,
        "wires": []
    },
    {
        "id": "124b37f0419c3941",
        "type": "uib-element",
        "z": "dd535f73e60cae86",
        "name": "Action list",
        "topic": "",
        "elementtype": "html",
        "parent": "#actionlist",
        "parentSource": "",
        "parentSourceType": "str",
        "elementid": "action_list_uib",
        "elementId": "",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "data": "payload",
        "dataSourceType": "msg",
        "position": "last",
        "positionSourceType": "str",
        "passthrough": false,
        "confData": {},
        "x": 1640,
        "y": 820,
        "wires": [
            [
                "a9efb0678baddb7d"
            ]
        ]
    },
    {
        "id": "c11c07699cd439b3",
        "type": "inject",
        "z": "dd535f73e60cae86",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1110,
        "y": 820,
        "wires": [
            [
                "9958dfd95401c6c4"
            ]
        ]
    },
    {
        "id": "9958dfd95401c6c4",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Get Action List",
        "func": "let settings = flow.get(\"settings\");\nif (settings === undefined) {\n    node.status({fill: \"red\", shape: \"ring\", text: \"Missing settings\" });\n    return;\n}\n// Set settings defaults\nif (settings.rulestore === undefined) settings.rulestore = \"\";\n\nlet rules = flow.get(\"rules\", settings.rulestore);\nif (rules === undefined) {\n    rules = [];\n}\n\nif (rules.length===0) {\n    return;\n}\n\nlet editor = flow.get(\"editor\");\nif (editor === undefined) {\n    editor = {};\n}\n\ndelete msg.uibuilderCtrl;\nmsg.payload = rules[editor.ruleid].actions;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 820,
        "wires": [
            [
                "b031b0d78dc9ae2a"
            ]
        ]
    },
    {
        "id": "b031b0d78dc9ae2a",
        "type": "template",
        "z": "dd535f73e60cae86",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n            <div class=\"list-item{{#selected}} selected{{/selected}}\" id=\"action_{{id}}\" onclick=\"uibuilder.eventSend(event)\">\n                <div class=\"content\">\n                    <h3>{{type}}&nbsp;{{^name}}{{topic}}&nbsp;{{value}}{{/name}}{{#name}}{{name}}&nbsp;->&nbsp;{{value}}{{/name}}</h3>\n                </div>\n            </div>\n            {{#selected}}<div id=\"action_editor\"></div>{{/selected}}\n{{/payload}}\n",
        "output": "str",
        "x": 1480,
        "y": 820,
        "wires": [
            [
                "124b37f0419c3941"
            ]
        ]
    },
    {
        "id": "a9efb0678baddb7d",
        "type": "link out",
        "z": "dd535f73e60cae86",
        "name": "link out 59",
        "mode": "link",
        "links": [
            "da38e26f2fe532ea"
        ],
        "x": 1805,
        "y": 820,
        "wires": []
    },
    {
        "id": "2d4f5d466b216f6a",
        "type": "switch",
        "z": "dd535f73e60cae86",
        "name": "Client Connect",
        "property": "uibuilderCtrl",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "client connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 760,
        "y": 760,
        "wires": [
            [
                "668f619db096a5d2"
            ]
        ]
    },
    {
        "id": "9a115156b972bb49",
        "type": "debug",
        "z": "dd535f73e60cae86",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 820,
        "wires": []
    },
    {
        "id": "01c2101948778563",
        "type": "function",
        "z": "dd535f73e60cae86",
        "name": "Prepare Condition Input Form",
        "func": "let editor = flow.get(\"editor\") ?? {};\n\nif (editor.conditionid !== undefined) {\n\n    let form = \n    [\n            {\n                \"id\": \"trigger\",\n                \"label\": \"Trigger:\",\n                \"type\": \"select\",\n                \"options\": [\n                    {\n                        \"label\": \"Data\",\n                        \"value\": \"data\"\n                    },\n                    {\n                        \"label\": \"State\",\n                        \"value\": \"state\"\n                    },\n                    {\n                        \"label\": \"Time\",\n                        \"value\": \"time\"\n                    }\n                ],\n                \"value\": msg.payload[editor.conditionid].trigger\n            },\n            {\n                \"id\": \"operand\",\n                \"type\": \"text\",\n                \"required\": true,\n                \"label\": \"Operand:\",\n                \"value\": msg.payload[editor.conditionid].operand\n            },\n            {\n                \"id\": \"operator\",\n                \"label\": \"Operator:\",\n                \"type\": \"select\",\n                \"options\": [\n                    {\n                        \"label\": \"Less than\",\n                        \"value\": \"LQ\"\n                    },\n                    {\n                        \"label\": \"Greater than\",\n                        \"value\": \"GT\"\n                    },\n                    {\n                        \"label\": \"Equals to\",\n                        \"value\": \"EQ\"\n                    }\n                ],\n                \"value\": msg.payload[editor.conditionid].operator\n            },\n            {\n                \"id\": \"value\",\n                \"type\": \"text\",\n                \"required\": true,\n                \"label\": \"Value:\",\n                \"value\": msg.payload[editor.conditionid].value\n            },\n            {\n                \"id\": \"submit_conditionform\",\n                \"type\": \"button\",\n                \"label\": \"Save changes\",\n                \"value\": \"submit\"\n            }\n    ];\n\n    if (msg.payload[editor.conditionid].trigger===\"time\") {\n        form[1].type = \"hidden\";\n        form[1].label = \" \";\n    }\n\n    // delete msg.uibuilderCtrl;\n    // return msg;\n\n    return [{\"payload\": form}];\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 880,
        "wires": [
            [
                "204d235c9fdc3819"
            ]
        ]
    },
    {
        "id": "204d235c9fdc3819",
        "type": "uib-element",
        "z": "dd535f73e60cae86",
        "name": "Condition Form",
        "topic": "",
        "elementtype": "sform",
        "parent": "#condition_editor",
        "parentSource": "",
        "parentSourceType": "str",
        "elementid": "condition_editor_uib",
        "elementId": "",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "data": "payload",
        "dataSourceType": "msg",
        "position": "last",
        "positionSourceType": "str",
        "passthrough": false,
        "confData": {},
        "x": 1660,
        "y": 880,
        "wires": [
            [
                "30aa09c757a14fc6"
            ]
        ]
    },
    {
        "id": "30aa09c757a14fc6",
        "type": "link out",
        "z": "dd535f73e60cae86",
        "name": "link out 60",
        "mode": "link",
        "links": [
            "da38e26f2fe532ea"
        ],
        "x": 1805,
        "y": 880,
        "wires": []
    },
    {
        "id": "2f43a6e2d75fab3a",
        "type": "debug",
        "z": "dd535f73e60cae86",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 760,
        "wires": []
    },
    {
        "id": "8be0a783c25b7c66",
        "type": "ui_group",
        "name": "Aggregate Status Messages",
        "tab": "809332264a7eff62",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0bbfe8d835f43144",
        "type": "ui_group",
        "name": "All Status Messages",
        "tab": "809332264a7eff62",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d082943d35fc7c40",
        "type": "ui_group",
        "name": "Data List",
        "tab": "809332264a7eff62",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "809332264a7eff62",
        "type": "ui_tab",
        "name": "Automation Engine",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
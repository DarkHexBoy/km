[{"id":"4731ba2f415e8a3d","type":"comment","z":"151def52ea276427","name":"16 channel current sensor","info":"","x":140,"y":4560,"wires":[]},{"id":"d6d7af0f4ac98c32","type":"mqtt in","z":"151def52ea276427","name":"","topic":"current/data","qos":"2","datatype":"auto-detect","broker":"4ab53a892fcbe5fa","nl":false,"rap":true,"rh":0,"inputs":0,"x":130,"y":4620,"wires":[["08ea00b211dc6964","ee99c43f6df32b3d","e1bdb0c0b7bdf599","fb466ff873f84fb9","7a84c0c96a7db7ab"]]},{"id":"08ea00b211dc6964","type":"debug","z":"151def52ea276427","name":"Input data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":360,"y":4740,"wires":[]},{"id":"839155f01c19acab","type":"debug","z":"151def52ea276427","name":"Influx query","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":630,"y":4700,"wires":[]},{"id":"ee99c43f6df32b3d","type":"function","z":"151def52ea276427","name":"Convert to Influx","func":"var output = [];\n\nlet record = {\n    \"measurement\": \"sensors\",\n    \"tags\": {\n        \"device\": \"currentdownstairs\"\n    },\n    \"fields\": {\n        \"c01\": msg.payload.c01,\n        \"c02\": msg.payload.c02,\n        \"c03\": msg.payload.c03,\n        \"c04\": msg.payload.c04,\n        \"c05\": msg.payload.c05,\n        \"c06\": msg.payload.c06,\n        \"c07\": msg.payload.c07,\n        \"c08\": msg.payload.c08,\n        \"c09\": msg.payload.c09,\n        \"c10\": msg.payload.c10,\n        \"c11\": msg.payload.c11,\n        \"c12\": msg.payload.c12,\n        \"c13\": msg.payload.c13,\n        \"c14\": msg.payload.c14,\n        \"c15\": msg.payload.c15,\n        \"c16\": msg.payload.c16\n    }\n};\n\n\noutput.push(record);\nmsg.payload = output;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":4620,"wires":[["839155f01c19acab","596df4503eb5e929"]]},{"id":"596df4503eb5e929","type":"link out","z":"151def52ea276427","name":"","mode":"link","links":["9d9949dc65ea2aba"],"x":615,"y":4620,"wires":[]},{"id":"e1bdb0c0b7bdf599","type":"function","z":"151def52ea276427","name":"Health check","func":"var devicename = \"rievtech_hmi_bejarat\"; // Device name used for context variable\nvar system_id = 48; // System id number for diagnostic update\nvar online_threshold = 10; // Seconds between updates under which the device is considered online\nvar offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nvar temp = context.get(devicename+\"_update\");\nvar current = new Date().getTime();\nmsg.payload = \"No data\";\nmsg.warning = false;\nif (msg.topic!==\"timecheck\") {\n    // Do not update the context if it is triggered by the check inject node\n    context.set(devicename+\"_update\",current);\n}\nif (temp===undefined) {\n    // this will be the case when node-red is booting up or redeployed\n    context.set(devicename+\"_update\",current);\n}\n\nif (temp!==undefined) {\n    current = current - temp;\n    current = Math.floor(current/1000);\n    var minute = Math.floor(current/60);\n    var hour = Math.floor(minute/60);\n    var day = Math.floor(hour/24);\n    if (current>24*60*60) {\n        msg.payload = \"Last update \" + day + \" days, \" + hour%24 + \" hours, \" + minute%60 + \" minutes, \" + current%60 + \" seconds ago\";\n    } else if (current>60*60) {\n        msg.payload = \"Last update \" + hour%24 + \" hours, \" + minute%60 + \" minutes, \" + current%60 + \" seconds ago\";\n    } else if (current>60) {\n        msg.payload = \"Last update \" + minute%60 + \" minutes, \" + current%60 + \" seconds ago\";\n    } else {\n        msg.payload = \"Last update \" + current%60 + \" seconds ago\";\n    }\n\n    if (context.get(devicename+\"_state\")!==1) {\n        if (current<online_threshold) {\n            msg.payload = \"Bejarat HMI is now online\";\n            msg.system = system_id; // System id, use 1 for Dummy\n            msg.state = 1; // specify if the message is to change system status\n            msg.severity = 2; // 0: information, 1: warning, 2: error\n            //msg.email = true; // if separate email should be sent\n            //msg.emailtext = \"\"; this a long text which goes into the email  \n            msg.warning = true;\n            context.set(devicename+\"_state\",1);\n        }\n    } else {\n        if (current>offline_threshold) {\n            msg.payload = \"Bejarat HMI is not transmitting\";\n            msg.system = system_id; // System id, use 1 for Dummy\n            msg.state = 99; // specify if the message is to change system status\n            msg.severity = 2; // 0: information, 1: warning, 2: error\n            //msg.email = true; // if separate email should be sent\n            //msg.emailtext = \"\"; this a long text which goes into the email            \n            msg.warning = true;\n            context.set(devicename+\"_state\",99);\n        }\n    }\n    \n    \n}\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.payload});\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":370,"y":4680,"wires":[[]]},{"id":"3f6c84dd3d462419","type":"inject","z":"151def52ea276427","name":"Check","props":[{"p":"payload","v":"","vt":"date"},{"p":"topic","v":"timecheck","vt":"str"}],"repeat":"1","crontab":"","once":false,"topic":"timecheck","payload":"","payloadType":"date","x":160,"y":4680,"wires":[["e1bdb0c0b7bdf599"]]},{"id":"fb466ff873f84fb9","type":"change","z":"151def52ea276427","name":"Pantry sockets","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.c04","tot":"msg"},{"t":"set","p":"topic","pt":"msg","to":"data","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":4820,"wires":[["43189939c85d91a4"]]},{"id":"059e2eb5ea09e5b5","type":"debug","z":"151def52ea276427","name":"Calculation updates","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":940,"y":4820,"wires":[]},{"id":"cbab857bc0c82de5","type":"inject","z":"151def52ea276427","name":"Calculation settings","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"settings","payload":"{\"baselinethreshold\":0.1,\"devices\":[{\"name\":\"kettle\",\"min\":9.3,\"max\":9.7},{\"name\":\"coffee machine\",\"min\":5.5,\"max\":6.1}]}","payloadType":"json","x":280,"y":4880,"wires":[["43189939c85d91a4"]]},{"id":"583b7c5354c92c97","type":"debug","z":"151def52ea276427","name":"On/Off messages","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":940,"y":4860,"wires":[]},{"id":"d833a28c6f170e30","type":"function","z":"151def52ea276427","name":"Telegram alert","func":"msg.payload = { service: \"1\", type: \"message\", content: \"ðŸ”Œ \" + msg.payload.activedevice.name + \" turned \" + msg.topic + \" (\"+msg.payload.baseline+\"|\"+msg.payload.current+\")\"};\nnode.status({ fill: \"blue\", shape: \"ring\", text: msg.payload.content });\nreturn msg;\n\n\n\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":4920,"wires":[["f5542949e6ed567d"]]},{"id":"f5542949e6ed567d","type":"link out","z":"151def52ea276427","name":"","mode":"link","links":["86deb2f58b76aa52"],"x":1065,"y":4920,"wires":[]},{"id":"7a84c0c96a7db7ab","type":"change","z":"151def52ea276427","name":"Dishwaser & Microwave","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.c11","tot":"msg"},{"t":"set","p":"topic","pt":"msg","to":"data","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":370,"y":4940,"wires":[["194bd14738b45351"]]},{"id":"12c8e76ecc9fe4b7","type":"inject","z":"151def52ea276427","name":"Calculation settings","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"settings","payload":"{\"baselinethreshold\":0.01,\"devices\":[{\"name\":\"dishwasher\",\"min\":9.28,\"max\":10}]}","payloadType":"json","x":270,"y":4980,"wires":[["194bd14738b45351"]]},{"id":"43189939c85d91a4","type":"function","z":"151def52ea276427","name":"Series Calculation","func":"function mean(array) {\n    var total = 0;\n    for (var i = 0; i < array.length; i++) {\n        total += array[i];\n    }\n    var avg = total / array.length;\n    return avg;\n}\n\nlet data = context.get(\"data\") ?? { baselinehistory: [], currenthistory: [], baseline: 0, current: 0, atbaseline: true };\n\n// Handle settings\nlet settings = context.get(\"settings\");\n\nif (msg.topic === \"settings\") {\n    settings = msg.payload;\n    context.set(\"settings\", settings);\n    return;\n}\n\nif (settings === undefined) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Settings missing\" });\n    return;\n}\n\nif (msg.topic === \"data\") {\n\n    // Store data to calculate a running average\n    data.currenthistory.push(msg.payload);\n    // Cap the history to the last 3 readings\n    if (data.currenthistory.length > 3) {\n        data.currenthistory.shift();\n    }\n    if (data.currenthistory.length > 0) {\n        data.current = mean(JSON.parse(JSON.stringify(data.currenthistory)));\n    }\n\n    // Store data to calculate a baseline average\n    if (Math.abs(data.current - data.baseline) < settings.baselinethreshold) {\n        data.baselinehistory.push(msg.payload);\n        if (data.baselinehistory.length > 10) {\n            data.baselinehistory.shift();\n        }\n        if (!data.atbaseline && data.deviceselected) {\n            // device just turned off\n            node.send([null, { topic: \"off\", payload: data }]);\n        }\n        data.atbaseline = true;\n        data.device = \"none\";\n        delete data.activedevice;\n        data.deviceselected = false;\n    } else {\n        data.atbaseline = false;\n    }\n\n    // Calculate some averages\n    if (data.baselinehistory.length > 0) {\n        data.baseline = mean(JSON.parse(JSON.stringify(data.baselinehistory)));\n    }\n\n\n    // if we are not at baseline, try to identify the device\n    if (!data.atbaseline && !data.deviceselected) {\n        let devicefound = false;\n        for (let i = 0; i < settings.devices.length; i++) {\n            if ((data.current > settings.devices[i].min) && (data.current < settings.devices[i].max)) {\n                data.activedevice = JSON.parse(JSON.stringify(settings.devices[i]));\n                data.device = data.activedevice.name;\n                data.deviceselected = true;\n                node.send([null, { topic: \"on\", payload: data }]);\n                devicefound = true;\n                break;\n            }\n        }\n        if (!devicefound) {\n            data.device = \"none\";\n            delete data.activedevice;\n            data.deviceselected = false;\n        }\n    }\n\n    // update node status\n    if (data.atbaseline) {\n        node.status({ fill: \"green\", shape: \"ring\", text: \"At baseline: \" + data.baseline + \" | current:\" + data.current });\n    } else {\n        if (data.deviceselected) {\n            node.status({ fill: \"blue\", shape: \"ring\", text: data.activedevice.name + \" is on | baseline: \" + data.baseline + \" | current:\" + data.current });\n        } else {\n            node.status({ fill: \"yellow\", shape: \"ring\", text: \"Not at baseline: \" + data.baseline + \" | current:\" + data.current });\n        }\n    }\n\n    context.set(\"data\", data);\n    msg.payload = data;\n    return [msg, null];\n\n}","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":4820,"wires":[["059e2eb5ea09e5b5"],["583b7c5354c92c97","d833a28c6f170e30"]]},{"id":"194bd14738b45351","type":"function","z":"151def52ea276427","name":"Series Calculation","func":"function mean(array) {\n    var total = 0;\n    for (var i = 0; i < array.length; i++) {\n        total += array[i];\n    }\n    var avg = total / array.length;\n    return avg;\n}\n\nlet data = context.get(\"data\") ?? { baselinehistory: [], currenthistory: [], baseline: 0, current: 0, atbaseline: true };\n\n// Handle settings\nlet settings = context.get(\"settings\");\n\nif (msg.topic === \"settings\") {\n    settings = msg.payload;\n    context.set(\"settings\", settings);\n    return;\n}\n\nif (settings === undefined) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Settings missing\" });\n    return;\n}\n\nif (msg.topic === \"data\") {\n\n    // Store data to calculate a running average\n    data.currenthistory.push(msg.payload);\n    // Cap the history to the last 3 readings\n    if (data.currenthistory.length > 6) {\n        data.currenthistory.shift();\n    }\n    if (data.currenthistory.length > 0) {\n        data.current = mean(JSON.parse(JSON.stringify(data.currenthistory)));\n    }\n\n    // Store data to calculate a baseline average\n    if (Math.abs(data.current - data.baseline) < settings.baselinethreshold) {\n        data.baselinehistory.push(msg.payload);\n        if (data.baselinehistory.length > 10) {\n            data.baselinehistory.shift();\n        }\n        if (!data.atbaseline && data.deviceselected) {\n            // device just turned off\n            node.send([null, { topic: \"off\", payload: data }]);\n        }\n        data.atbaseline = true;\n        data.device = \"none\";\n        delete data.activedevice;\n        data.deviceselected = false;\n    } else {\n        data.atbaseline = false;\n    }\n\n    // Calculate some averages\n    if (data.baselinehistory.length > 0) {\n        data.baseline = mean(JSON.parse(JSON.stringify(data.baselinehistory)));\n    }\n\n\n    // if we are not at baseline, try to identify the device\n    if (!data.atbaseline && !data.deviceselected) {\n        let devicefound = false;\n        for (let i = 0; i < settings.devices.length; i++) {\n            if ((data.current > settings.devices[i].min) && (data.current < settings.devices[i].max)) {\n                data.activedevice = JSON.parse(JSON.stringify(settings.devices[i]));\n                data.device = data.activedevice.name;\n                data.deviceselected = true;\n                node.send([null, { topic: \"on\", payload: data }]);\n                devicefound = true;\n                break;\n            }\n        }\n        if (!devicefound) {\n            data.device = \"none\";\n            delete data.activedevice;\n            data.deviceselected = false;\n        }\n    }\n\n    // update node status\n    if (data.atbaseline) {\n        node.status({ fill: \"green\", shape: \"ring\", text: \"At baseline: \" + data.baseline + \" | current:\" + data.current });\n    } else {\n        if (data.deviceselected) {\n            node.status({ fill: \"blue\", shape: \"ring\", text: data.activedevice.name + \" is on | baseline: \" + data.baseline + \" | current:\" + data.current });\n        } else {\n            node.status({ fill: \"yellow\", shape: \"ring\", text: \"Not at baseline: \" + data.baseline + \" | current:\" + data.current });\n        }\n    }\n\n    context.set(\"data\", data);\n    msg.payload = data;\n    return [msg, null];\n\n}","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":4940,"wires":[[],["d833a28c6f170e30"]]},{"id":"4ab53a892fcbe5fa","type":"mqtt-broker","name":"Local Broker","broker":"127.0.0.1","port":"1883","clientid":"NodeRed","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""}]
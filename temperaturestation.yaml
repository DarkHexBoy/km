# New weather station with BME280 environment sensor
# and 4 outputs for relays
# repay outputs are on D5, D6, D7, D0

substitutions:
  devicename: temperaturestation

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini

# Enable logging
logger:

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "TempStation Fallback Hotspot"
    password: "12345678"

captive_portal:

mqtt:
  broker: !secret mqtt_ip
  username: !secret mqtt_user
  password: !secret mqtt_password
  client_id: $devicename

# I2C is required for most of the sensors, environment, light, UV
i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a
  frequency: 100kHz

text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    state_topic: $devicename/uptime_text

switch:
  - platform: gpio
    name: "Relay 1"
    pin:
      number: 14  
      inverted: true
  - platform: gpio
    name: "Relay 2"
    pin:
      number: 12
      inverted: true
  - platform: gpio
    name: "Relay 3"
    pin:
      number: 13
      inverted: true
  - platform: gpio
    name: "Relay 4"
    pin:
      number: 16
      inverted: true

sensor:

# Report Wifi signal strength
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    state_topic: $devicename/rssi

# BME280 Environment Sensor
  - platform: bme280_i2c
    temperature:
      name: "BME280 Temperature"
      oversampling: 16x
      state_topic: $devicename/temperature
    pressure:
      name: "BME280 Pressure"
      state_topic: $devicename/pressure
    humidity:
      name: "BME280 Humidity"
      state_topic: $devicename/humidity
    address: 0x76
    update_interval: 60s

# System uptime
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    state_topic: $devicename/uptime
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
    filters:
      - lambda: return x / 60;
    unit_of_measurement: "m"

# Web Server for discovery purposes
web_server:
  port: 80



